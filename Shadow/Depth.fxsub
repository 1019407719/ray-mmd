#include "../ray.conf"
#include "../shader/math.fxsub"
#include "../shader/common.fxsub"
#include "../shader/shadowcommon.fxsub"

float3 LightDirection : DIRECTION < string Object = "Light"; >;

static float4x4 matLightView = CreateLightViewMatrix(normalize(LightDirection));
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightProjectToCameraView = mul(matViewInverse, matLightView);
static float4x4 lightParam = CreateLightProjParameters(matLightProjectToCameraView);

#if RECIEVER_ALPHA_MAP_ENABLE
texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state {
	texture = <DiffuseMap>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = POINT;
	ADDRESSU  = WRAP;	ADDRESSV  = WRAP;
};
#endif

shared texture PSSM : OFFSCREENRENDERTARGET;
sampler PSSMsamp = sampler_state {
	texture = <PSSM>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

float PCF(float2 coord, float receiverDepth, float sdrate, int samples) 
{
    float shadow = 0.0;
    float s = 1.5 / SHADOW_MAP_SIZE;

    [unroll]
    for (int x = -samples; x <= samples; x++) 
    {
        [unroll]
        for (int y = -samples; y <= samples; y++)
        {
            float2 pos = coord + float2(x, y) * s;
            shadow += CalcLight(tex2D(PSSMsamp, pos).x, receiverDepth, sdrate);
        }
    }
    
    samples = samples * 2 + 1;
    
    return saturate(shadow / (samples * samples));
}

void ShadowlessObjectVS(
	in float4 Position : POSITION, 
	in float2 Texcoord : TEXCOORD0,
	out float3 oTexcoord : TEXCOORD0,
	out float4 oPosition : POSITION)
{
	oPosition = mul(Position, matViewProject);
	oTexcoord = float3(Texcoord.xy, oPosition.z);
}

float4 ShadowlessObjectPS(float3 coord : TEXCOORD0, uniform bool useTexture) : COLOR
{
#if RECIEVER_ALPHA_ENABLE
	clip(!opadd - 0.001f);
	float alpha = MaterialDiffuse.a;
#if RECIEVER_ALPHA_MAP_ENABLE
	if (useTexture) alpha *= tex2D(DiffuseMapSamp, coord.xy).a;
#endif
	clip(alpha - 0.01);
#endif

#if SSAO_DISABLE
	coord.z = -coord.z;
#endif

	return float4(1, coord.z, 0, 1);
}

void ShadowObjectVS(
    in float4 Position : POSITION, 
    in float3 Normal : NORMAL, 
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord : TEXCOORD0,
    out float3 oNormal   : TEXCOORD1,
    out float4 oLightPPos01 : TEXCOORD2,
    out float4 oLightPPos23 : TEXCOORD3,
    out float4 oPosition : POSITION)
{
    oPosition = mul(Position, matViewProject);
    oNormal = Normal;

    float4 PPos = mul(Position, matLightViewProject);
    PPos.xy /= PPos.w;

    const float2 scale = float2(0.25, -0.25);
    oLightPPos01.xy = (PPos.xy * lightParam[0].xy + lightParam[0].zw);
    oLightPPos01.zw = (PPos.xy * lightParam[1].xy + lightParam[1].zw);
    oLightPPos23.xy = (PPos.xy * lightParam[2].xy + lightParam[2].zw);
    oLightPPos23.zw = (PPos.xy * lightParam[3].xy + lightParam[3].zw);
    oLightPPos01 *= scale.xyxy;
    oLightPPos23 *= scale.xyxy;

    oTexcoord = float4(Texcoord.xy, oPosition.z, PPos.z);
}

float4 ShadowObjectPS(
    in float4 coord : TEXCOORD0,
    in float3 normal : TEXCOORD1,
    in float4 LightPPos01 : TEXCOORD2,
    in float4 LightPPos23 : TEXCOORD3,
    uniform bool useTexture) : COLOR
{
#if RECIEVER_ALPHA_ENABLE
    float alpha = MaterialDiffuse.a;
#if RECIEVER_ALPHA_MAP_ENABLE
    if (useTexture) alpha *= tex2D(DiffuseMapSamp, coord.xy).a;
#endif
    clip(alpha - 0.01);
#endif

    float4 cascadeLightPPos0 = CalcCascadePPos(LightPPos01.xy, float2(0, 0), 0);
    float4 cascadeLightPPos1 = CalcCascadePPos(LightPPos01.zw, float2(1, 0), 1);
    float4 cascadeLightPPos2 = CalcCascadePPos(LightPPos23.xy, float2(0, 1), 2);
    float4 cascadeLightPPos3 = CalcCascadePPos(LightPPos23.zw, float2(1, 1), 3);

    float4 texCoord0 = cascadeLightPPos3;
    float4 texCoord1 = 0;
    if (cascadeLightPPos2.w > 0.0) { texCoord1 = texCoord0; texCoord0 = cascadeLightPPos2; }
    if (cascadeLightPPos1.w > 0.0) { texCoord1 = texCoord0; texCoord0 = cascadeLightPPos1; }
    if (cascadeLightPPos0.w > 0.0) { texCoord1 = texCoord0; texCoord0 = cascadeLightPPos0; }

    float receiverDepth = coord.w;
    float depthSlope = ShadowSlopeScaledBias(receiverDepth);
    float depthBias = (coord.z / LightZMax + depthSlope) * 0.005;
    receiverDepth -= depthBias;

    float sdrate = 30000.0 / 4.0 - 0.05;
    float shadow = PCF(texCoord0.xy, receiverDepth, sdrate, 3);
    
#if SSAO_DISABLE
    coord.z = -coord.z;
#endif
    
    shadow = min(shadow, saturate(dot(normalize(normal), -LightDirection)));
    return float4(shadow, coord.z, 0, 1);
}

#define OBJECT_SHADOWLESS_TEC(name, mmdpass, tex) \
	technique name < string MMDPass = mmdpass; bool UseTexture = tex; \
	>{ \
		pass DrawObject { \
			AlphaTestEnable = false; AlphaBlendEnable = false; \
			VertexShader = compile vs_3_0 ShadowlessObjectVS(); \
			PixelShader  = compile ps_3_0 ShadowlessObjectPS(tex); \
		} \
	}

#define OBJECT_TEC(name, mmdpass, tex) \
	technique name < string MMDPass = mmdpass; bool UseTexture = tex; \
	>{ \
		pass DrawObject { \
			AlphaTestEnable = false; AlphaBlendEnable = false; \
			VertexShader = compile vs_3_0 ShadowObjectVS(); \
			PixelShader  = compile ps_3_0 ShadowObjectPS(tex); \
		} \
	}
	
OBJECT_SHADOWLESS_TEC(DepthTec2, "object", false)
OBJECT_SHADOWLESS_TEC(DepthTec3, "object", true)
	
OBJECT_TEC(DepthTecBS2, "object_ss", false)
OBJECT_TEC(DepthTecBS3, "object_ss", true)

technique DepthTec0 < string MMDPass = "object"; >{}
technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}