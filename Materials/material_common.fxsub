float time : TIME;
float elapsed : ELAPSEDTIME;

float2 MousePositionn : MOUSEPOSITION;

float4x4 matWorld                 : WORLD;
float4x4 matWorldView             : WORLDVIEW;
float4x4 matWorldViewProject      : WORLDVIEWPROJECTION;
float4x4 matView                  : VIEW;
float4x4 matViewInverse           : VIEWINVERSE;
float4x4 matProject               : PROJECTION;
float4x4 matProjectInverse        : PROJECTIONINVERSE;
float4x4 matViewProject           : VIEWPROJECTION;
float4x4 matViewProjectInverse    : VIEWPROJECTIONINVERSE;

float3 CameraPosition  : POSITION  < string Object = "Camera"; >;
float3 CameraDirection : DIRECTION < string Object = "Camera"; >;

float3  LightDiffuse    : DIFFUSE   < string Object = "Light"; >;
float3  LightSpecular   : SPECULAR  < string Object = "Light"; >;
float3  LightDirection  : DIRECTION < string Object = "Light"; >;

float4  MaterialDiffuse     : DIFFUSE  < string Object = "Geometry"; >;
float3  MaterialAmbient     : AMBIENT  < string Object = "Geometry"; >;
float3  MaterialEmissive    : EMISSIVE < string Object = "Geometry"; >;
float3  MaterialSpecular    : SPECULAR < string Object = "Geometry"; >;
float3  MaterialToon        : TOONCOLOR;
float   MaterialPower       : SPECULARPOWER < string Object = "Geometry"; >;

float4  TextureAddValue   : ADDINGTEXTURE;
float4  TextureMulValue   : MULTIPLYINGTEXTURE;
float4  SphereAddValue    : ADDINGSPHERETEXTURE;
float4  SphereMulValue    : MULTIPLYINGSPHERETEXTURE;

#if EMISSIVE_APPLY_MORPH_COLOR
float MorphRed   : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float MorphGreen : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float MorphBlue  : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
#endif

#ifndef TEXTURE_ANISOTROPY_LEVEL
#   define TEXTURE_ANISOTROPY_LEVEL 0
#endif

#if TEXTURE_USE_LINEAR
#   define TEXTURE_FILTER LINEAR
#elif TEXTURE_USE_NEAREST
#   define TEXTURE_FILTER POINT
#elif TEXTURE_USE_ANISOTROPY
#   define TEXTURE_FILTER ANISOTROPIC
#else
#   define TEXTURE_FILTER POINT
#endif

#if TEXTURE_USE_MIP_LINEAR
#   define TEXTURE_MIP_FILTER LINEAR
#elif TEXTURE_USE_MIP_NEAREST
#   define TEXTURE_MIP_FILTER POINT
#elif TEXTURE_USE_MIP_NONE
#   define TEXTURE_MIP_FILTER NONE
#else
#   define TEXTURE_MIP_FILTER POINT
#endif

#define PI 3.141592654f

#define InvLog2 3.32192809489f

#define LIGHTINGMODEL_NORMAL         0
#define LIGHTINGMODEL_TRANSMITTANCE  1
#define LIGHTINGMODEL_EMISSIVE       2

#define SUBSURFACESCATTERING_MARBLE 0
#define SUBSURFACESCATTERING_SKIN   1

#define MIDPOINT_8_BIT (127.0f / 255.0f)
#define MAX_FRACTIONAL_8_BIT        (255.0f / 256.0f)
#define TWO_BITS_EXTRACTION_FACTOR  (3.0f + MAX_FRACTIONAL_8_BIT)

shared texture Gbuffer2RT: RENDERCOLORTARGET;
shared texture Gbuffer3RT: RENDERCOLORTARGET;
shared texture Gbuffer4RT: RENDERCOLORTARGET;
shared texture Gbuffer5RT: RENDERCOLORTARGET;
shared texture Gbuffer6RT: RENDERCOLORTARGET;
shared texture Gbuffer7RT: RENDERCOLORTARGET;
shared texture Gbuffer8RT: RENDERCOLORTARGET;

#if (ALBEDO_MAP_ENABLE && ALBEDO_MAP_IN_SCREEN_MAP) || (EMISSIVE_MAP_ENABLE && EMISSIVE_MAP_IN_SCREEN_MAP)
    shared texture2D DummyScreenTex : RenderColorTarget;
#endif

#if USE_CUSTOM_MATERIAL && ALBEDO_MAP_ENABLE && ALBEDO_MAP_IN_TEXTURE != 1
    #if ALBEDO_MAP_IN_SCREEN_MAP == 0
        #if ALBEDO_MAP_ANIMATION_ENABLE
            texture AlbedoMap : ANIMATEDTEXTURE <string ResourceName = ALBEDO_MAP_FILE; float speed=ALBEDO_MAP_ANIMATION_ENABLE;>;
        #else
            texture AlbedoMap<string ResourceName = ALBEDO_MAP_FILE;>; 
        #endif
    #endif
    sampler AlbedoMapSamp = sampler_state
    {
#if ALBEDO_MAP_IN_SCREEN_MAP
        texture = DummyScreenTex;
#else
        texture = AlbedoMap;
#endif
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && ALPHA_MAP_ENABLE && ALPHA_MAP_IN_TEXTURE != 1
    texture2D AlphaMap<string ResourceName = ALPHA_MAP_FILE;>; 
    sampler AlphaMapSamp = sampler_state
    {
        texture = AlphaMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && NORMAL_MAP_ENABLE && NORMAL_MAP_IN_SPHEREMAP != 1
    texture2D NormalMap<string ResourceName = NORMAL_MAP_FILE;>; 
    sampler NormalMapSamp = sampler_state
    {
        texture = NormalMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && NORMAL_MAP_SUB_ENABLE
    texture2D NormalSubMap<string ResourceName = NORMAL_MAP_SUB_FILE;>; 
    sampler NormalSubMapSamp = sampler_state
    {
        texture = NormalSubMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && SMOOTHNESS_MAP_ENABLE && SMOOTHNESS_MAP_IN_TONEMAP != 1
    texture2D SmoothnessMap<string ResourceName = SMOOTHNESS_MAP_FILE;>; 
    sampler SmoothnessMapSamp = sampler_state
    {
        texture = SmoothnessMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && METALNESS_MAP_ENABLE && METALNESS_MAP_IN_TONEMAP != 1
    texture2D MetalnessMap<string ResourceName = METALNESS_MAP_FILE;>; 
    sampler MetalnessMapSamp = sampler_state
    {
        texture = MetalnessMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && SSS_MAP_ENABLE
    texture2D TransmittanceMap<string ResourceName = SSS_MAP_FILE;>; 
    sampler TransmittanceMapSamp = sampler_state
    {
        texture = TransmittanceMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && MELANIN_MAP_ENABLE
    texture2D MelaninMap<string ResourceName = MELANIN_MAP_FILE;>; 
    sampler MelaninMapSamp = sampler_state
    {
        texture = MelaninMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && EMISSIVE_ENABLE && EMISSIVE_MAP_ENABLE && EMISSIVE_MAP_IN_TEXTURE != 1
    #if EMISSIVE_MAP_IN_SCREEN_MAP == 0
        #if EMISSIVE_MAP_ANIMATION_ENABLE
            texture EmissiveMap : ANIMATEDTEXTURE <string ResourceName = EMISSIVE_MAP_FILE; float speed=EMISSIVE_MAP_ANIMATION_SPEED;>;
        #else
            texture EmissiveMap<string ResourceName = EMISSIVE_MAP_FILE;>; 
        #endif
    #endif
    sampler EmissiveMapSamp = sampler_state
    {
#if EMISSIVE_MAP_IN_SCREEN_MAP
        texture = DummyScreenTex;
#else
        texture = EmissiveMap;
#endif
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && PARALLAX_MAP_ENABLE
    texture2D ParallaxMap<string ResourceName = PARALLAX_MAP_FILE;>; 
    sampler ParallaxMapSamp = sampler_state
    {
        texture = ParallaxMap;
        MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
        MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
        ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
    texture = <DiffuseMap>;
    MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
    MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
    ADDRESSU = WRAP; ADDRESSV = WRAP;
};

texture SphereMap : MATERIALSPHEREMAP;
sampler SphereMapSamp = sampler_state {
    texture = <SphereMap>;
    MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
    MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
    ADDRESSU = WRAP; ADDRESSV = WRAP;
};

texture ToneMap : MATERIALTOONTEXTURE;
sampler ToneMapSamp = sampler_state {
    texture = <ToneMap>;
    MAXANISOTROPY = TEXTURE_ANISOTROPY_LEVEL;
    MINFILTER = TEXTURE_FILTER; MAGFILTER = TEXTURE_FILTER; MIPFILTER = TEXTURE_MIP_FILTER;
    ADDRESSU = WRAP; ADDRESSV = WRAP;
};

struct VS_OUTPUT
{
    float4 Position : POSITION;
    float3 Normal   : TEXCOORD0;
    float2 Texcoord : TEXCOORD1;
    float  Distance : TEXCOORD2;
    float3 Viewdir  : TEXCOORD3; 
};

struct MaterialParam
{
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 transmittance;
    float3 emissive;
    float emissiveIntensity;
    float smoothness;
    float index;
    float alpha;
    int lightModel;
};

struct GbufferParam
{
    float4 buffer1 : COLOR0;
    float4 buffer2 : COLOR1;
    float4 buffer3 : COLOR2;
    float4 buffer4 : COLOR3;
};

float3 EncodeNormal(float3 normal)
{
    float p = sqrt(-normal.z * 8 + 8);
    float2 enc = normal.xy / p + 0.5f;
    float2 enc255 = enc * 255;
    float2 residual = floor(frac(enc255) * 16);
    return float3(floor(enc255), residual.x * 16 + residual.y) / 255;
}

float luminance(float3 rgb)
{
    const float3 lumfact = float3(0.2126f, 0.7152f, 0.0722f);
    return dot(rgb, lumfact);
}

float3 srgb2linear(float3 rgb)
{
    const float ALPHA = 0.055f;
    return rgb < 0.04045f ? rgb / 12.92f : pow((rgb + ALPHA) / (1 + ALPHA), 2.4f);
}

float4 srgb2linear(float4 c)
{
    return float4(srgb2linear(c.rgb), c.a);
}

float3 rgb2ycbcr(float3 col)
{
    float3 encode;
    encode.x = dot(float3(0.299, 0.587, 0.114),   col.rgb);
    encode.y = dot(float3(-0.1687, -0.3312, 0.5), col.rgb);
    encode.z = dot(float3(0.5, -0.4186, -0.0813), col.rgb);
    return half3(encode.x, encode.y * MIDPOINT_8_BIT + MIDPOINT_8_BIT, encode.z * MIDPOINT_8_BIT + MIDPOINT_8_BIT);
}

float3x3 computeTangentBinormalNormal(float3 N, float3 viewdir, float2 coord)
{
    float3 dp1 = ddx(viewdir);
    float3 dp2 = ddy(viewdir);
    float2 duv1 = ddx(coord);
    float2 duv2 = ddy(coord);

    float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
    float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
    float3 T = mul(float2(duv1.x, duv2.x), I);
    float3 B = mul(float2(duv1.y, duv2.y), I);

    return float3x3(normalize(T), normalize(B), N);
}

float2 ParallaxOcclusionMap(sampler heightMap, float2 coord, float3 V, int numSteps, float parallaxScale)
{
    float step = 1.0 / numSteps;
    float2 delta = parallaxScale * V.xy / (-V.z * numSteps);

    float curLayerHeight = 0;
    float curHeight = tex2D(heightMap, coord).r;
    float2 curTexcoord = coord;

    for (int i = 0; i < numSteps; i++)
    {
        if (curHeight <= curLayerHeight)
            break;
            
        curLayerHeight += step; 
        curTexcoord -= delta;
        curHeight = tex2D(heightMap, curTexcoord).r;
    }

    float2 deltaTexcoord = delta *= 0.5;
    float deltaHeight = step *= 0.5;

    curTexcoord += deltaTexcoord;
    curLayerHeight -= deltaHeight;

    for (int i = 0; i < 5; i++)
    {
        deltaTexcoord *= 0.5;
        deltaHeight *= 0.5;

        curHeight = tex2D(heightMap, curTexcoord).r;

        if (curHeight > curLayerHeight)
        {
            curTexcoord -= deltaTexcoord;
            curLayerHeight += deltaHeight;
        }
        else
        {
            curTexcoord += deltaTexcoord;
            curLayerHeight -= deltaHeight;
        }
    }

    return curTexcoord;
}

float SmoothnessToRoughness(float smoothness)
{
    return (1.0f - smoothness) * (1.0f - smoothness);
}

float RoughnessToSmoothness(float roughness)
{
    return 1.0f - sqrt(roughness);
}

float ShininessToSmoothness(float spec)
{
    return RoughnessToSmoothness(sqrt(2.0 / (spec + 2)));
}

GbufferParam EncodeGbuffer(MaterialParam material, float linearDepth)
{
    GbufferParam gbuffer;
    gbuffer.buffer1.xyz = material.albedo;
    gbuffer.buffer1.w = material.smoothness;

    gbuffer.buffer2.xyz = EncodeNormal(normalize(material.normal));
    gbuffer.buffer2.w = 0;

    gbuffer.buffer3.xyz = rgb2ycbcr(material.specular);
    gbuffer.buffer3.w = 0;

    if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
    {
        float scatteringAmount = frac(material.index);
        gbuffer.buffer2.w = scatteringAmount > 0.01 ? material.index / TWO_BITS_EXTRACTION_FACTOR : 0;
        
        material.transmittance = rgb2ycbcr(material.transmittance);
        gbuffer.buffer3.yz = material.transmittance.gb;
        gbuffer.buffer3.w = material.transmittance.r * MAX_FRACTIONAL_8_BIT;
    }
    else if (material.lightModel == LIGHTINGMODEL_EMISSIVE)
    {
        material.emissive = rgb2ycbcr(material.emissive);
        gbuffer.buffer3.yz = material.emissive.gb;
        gbuffer.buffer3.w = material.emissive.r * MAX_FRACTIONAL_8_BIT;
    }

    gbuffer.buffer3.w = ((float)material.lightModel + gbuffer.buffer3.w) / TWO_BITS_EXTRACTION_FACTOR;
    gbuffer.buffer4 = float4(linearDepth, material.emissiveIntensity, linearDepth, material.alpha);
    
    return gbuffer;
}

float3 ColorSynthesis(float3 diffuse, float m)
{
    float3 melanin = diffuse * luminance(diffuse);
    return diffuse * lerp(1.0, melanin, m);
}

float GetAlpha(float2 coord, bool use_texture)
{
#if SKYBOX_ENABLE
    return 1;
#elif USE_CUSTOM_MATERIAL
    #if ALPHA_MAP_ENABLE
        #if ALPHA_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
    
        #if ALPHA_MAP_IN_TEXTURE
            if (use_texture)
            {
                #if ALPHA_MAP_SWIZZLE == 0
                    return tex2D(DiffuseMapSamp, coord).r * MaterialDiffuse.a;
                #elif ALPHA_MAP_SWIZZLE == 1
                    return tex2D(DiffuseMapSamp, coord).g * MaterialDiffuse.a;
                #elif ALPHA_MAP_SWIZZLE == 2
                    return tex2D(DiffuseMapSamp, coord).b * MaterialDiffuse.a;
                #elif ALPHA_MAP_SWIZZLE == 3
                    return tex2D(DiffuseMapSamp, coord).a * MaterialDiffuse.a;
                #else
                    return tex2D(DiffuseMapSamp, coord).a * MaterialDiffuse.a;
                #endif            
            }
            else
            {
                return MaterialDiffuse.a;
            }
        #else
            #if ALPHA_MAP_SWIZZLE == 0
                return tex2D(AlphaMapSamp, coord * alphaMapLoopNum).r;
            #elif ALPHA_MAP_SWIZZLE == 1
                return tex2D(AlphaMapSamp, coord * alphaMapLoopNum).g;
            #elif ALPHA_MAP_SWIZZLE == 2
                return tex2D(AlphaMapSamp, coord * alphaMapLoopNum).b;
            #elif ALPHA_MAP_SWIZZLE == 3
                return tex2D(AlphaMapSamp, coord * alphaMapLoopNum).a;
            #else
                return tex2D(AlphaMapSamp, coord * alphaMapLoopNum).a;
            #endif
        #endif
    #else
        return alpha;
    #endif
#else
    return use_texture ? tex2D(DiffuseMapSamp, coord).a * MaterialDiffuse.a : MaterialDiffuse.a;
#endif
}

float3 GetAlbedo(float2 uv, bool use_texture)
{
#if USE_CUSTOM_MATERIAL
    #if ALBEDO_MAP_ENABLE
        #if ALBEDO_MAP_UV_FLIP
            uv.y = 1 - uv.y;
        #endif
        #if ALBEDO_MAP_IN_TEXTURE
            float3 albedoColor = MaterialDiffuse.rgb;
            if (use_texture)
            {
                albedoColor = tex2D(DiffuseMapSamp, uv * albedoMapLoopNum).rgb;
            }
        #else
            float3 albedoColor = tex2D(AlbedoMapSamp, uv * albedoMapLoopNum).rgb;
        #endif
        
        #if ALBEDO_MAP_APPLY_DIFFUSE
            albedoColor *= MaterialDiffuse.rgb;
        #endif
        
        #if ALBEDO_MAP_APPLY_COLOR
            albedoColor *= albedo.rgb;
        #endif
        
        #if ALBEDO_APPLY_MORPH_COLOR
            albedoColor *= float3(MorphRed, MorphGreen, MorphBlue);
        #endif
        
        return srgb2linear(albedoColor);
    #elif ALBEDO_APPLY_MORPH_COLOR
        return srgb2linear(float3(MorphRed, MorphGreen, MorphBlue));
    #else
        return srgb2linear(albedo.rgb);
    #endif
#else
    float3 diffuse = MaterialDiffuse.rgb;
    
    if (use_texture)
    {
        float4 TexColor = tex2D(DiffuseMapSamp, uv);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        TexColor.rgb = TexColor.rgb;
        diffuse *= TexColor.rgb;
    }
    
    return srgb2linear(diffuse);
#endif
}

float3 GetEmissiveColor(float2 uv, bool use_texture)
{
#if USE_CUSTOM_MATERIAL && EMISSIVE_ENABLE
    #if EMISSIVE_MAP_ENABLE || EMISSIVE_USE_ALBEDO       
        #if EMISSIVE_USE_ALBEDO
            float3 emissiveColor = GetAlbedo(uv, use_texture);
        #else
            #if EMISSIVE_MAP_UV_FLIP
                uv.y = 1 - uv.y;
            #endif
            #if EMISSIVE_MAP_IN_TEXTURE
                float3 emissiveColor = srgb2linear(tex2D(DiffuseMapSamp, uv * emissiveMapLoopNum).rgb);
            #else
                float3 emissiveColor = srgb2linear(tex2D(EmissiveMapSamp, uv * emissiveMapLoopNum).rgb);
            #endif
        #endif
        
        #if EMISSIVE_APPLY_COLOR
            emissiveColor *= emissive.rgb;
        #endif
        
        #if EMISSIVE_APPLY_MORPH_COLOR
            emissiveColor *= float3(MorphRed, MorphGreen, MorphBlue);
        #endif
        
        return emissiveColor;
    #elif EMISSIVE_APPLY_MORPH_COLOR
        return float3(MorphRed, MorphGreen, MorphBlue);
    #else
        return emissive.rgb;
    #endif
#else
    return MaterialSpecular * step(0, MaterialPower - 200);
#endif
}

float GetEmissiveIntensity()
{
#if USE_CUSTOM_MATERIAL
    #if EMISSIVE_ENABLE
        return emissiveIntensity;
    #else
        return 0;
    #endif
#else
    return max(0, (MaterialPower - 200) * 0.1);
#endif
}

float3 GetNormal(float3 N, float3 viewdir, float2 coord)
{
#if SKYBOX_ENABLE
    return -N;
#endif
#if USE_CUSTOM_MATERIAL
    #if NORMAL_MAP_ENABLE || NORMAL_MAP_SUB_ENABLE
        #if NORMAL_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif

        #if NORMAL_MAP_IN_SPHEREMAP
            float3 tangentNormal = normalize(tex2D(SphereMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
            tangentNormal.rg *= normalMapScale;
            tangentNormal = normalize(tangentNormal);
        #elif NORMAL_MAP_SUB_ENABLE && !NORMAL_MAP_ENABLE
            float3 tangentNormal = normalize(tex2D(NormalSubMapSamp, coord * normalMapSubLoopNum).rgb * 2 - 1);
            tangentNormal.rg *= normalMapSubScale;
            tangentNormal = normalize(tangentNormal);            
        #else    
            float3 tangentNormal = normalize(tex2D(NormalMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
            tangentNormal.rg *= normalMapScale;
            tangentNormal = normalize(tangentNormal);
        #endif
        
        #if NORMAL_MAP_ENABLE && NORMAL_MAP_SUB_ENABLE
            #if NORMAL_MAP_SUB_UV_FLIP && NORMAL_MAP_UV_FLIP == 0
                coord.y = 1 - coord.y;
            #endif
            #if NORMAL_MAP_SUB_UV_ROTATE
                coord = float2(coord.y, coord.x);
            #endif
        
            float3 tangentSubNormal = normalize(tex2D(NormalSubMapSamp, coord * normalMapSubLoopNum).rgb * 2 - 1);
            tangentSubNormal.rg *= normalMapSubScale;
            tangentSubNormal = normalize(tangentSubNormal);
            
            tangentNormal.rg += tangentSubNormal.rg;
            tangentNormal = normalize(tangentNormal);
        #endif
        
        float3x3 tangentFrame = computeTangentBinormalNormal(N, viewdir, coord);
        float3 highNormal = normalize(mul(tangentNormal, tangentFrame));
        return highNormal;
    #else
        return N;
    #endif
#else
    return N;
#endif
}

float GetSmoothness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SMOOTHNESS_MAP_ENABLE
        #if SMOOTHNESS_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
    
        #if SMOOTHNESS_MAP_IN_TONEMAP
            #if SMOOTHNESS_MAP_SWIZZLE == 0
                float smoothness = tex2D(ToneMapSamp, coord * smoothnessMapLoopNum).r;
            #elif SMOOTHNESS_MAP_SWIZZLE == 1
                float smoothness = tex2D(ToneMapSamp, coord * smoothnessMapLoopNum).g;
            #elif SMOOTHNESS_MAP_SWIZZLE == 2
                float smoothness = tex2D(ToneMapSamp, coord * smoothnessMapLoopNum).b;
            #elif SMOOTHNESS_MAP_SWIZZLE == 3
                float smoothness = tex2D(ToneMapSamp, coord * smoothnessMapLoopNum).a;
            #else
                float smoothness = tex2D(ToneMapSamp, coord * smoothnessMapLoopNum).r;
            #endif
        #else
            #if SMOOTHNESS_MAP_SWIZZLE == 0
                float smoothness = tex2D(SmoothnessMapSamp, coord * smoothnessMapLoopNum).r;
            #elif SMOOTHNESS_MAP_SWIZZLE == 1
                float smoothness = tex2D(SmoothnessMapSamp, coord * smoothnessMapLoopNum).g;
            #elif SMOOTHNESS_MAP_SWIZZLE == 2
                float smoothness = tex2D(SmoothnessMapSamp, coord * smoothnessMapLoopNum).b;
            #elif SMOOTHNESS_MAP_SWIZZLE == 3
                float smoothness = tex2D(SmoothnessMapSamp, coord * smoothnessMapLoopNum).a;
            #else
                float smoothness = tex2D(SmoothnessMapSamp, coord * smoothnessMapLoopNum).r;
            #endif
        #endif
        
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            smoothness = RoughnessToSmoothness(smoothness);
        #endif
        
        return smoothness;
    #else
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            return RoughnessToSmoothness(smoothness);
        #endif
        
        return smoothness;
    #endif
#else
    return ShininessToSmoothness(MaterialPower);
#endif
}

float GetMetalness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if METALNESS_MAP_ENABLE
        #if METALNESS_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
        
        #if METALNESS_MAP_IN_TONEMAP
            #if METALNESS_MAP_SWIZZLE == 0
                return tex2D(ToneMapSamp, coord * metalnessMapLoopNum).r;
            #elif METALNESS_MAP_SWIZZLE == 1
                return tex2D(ToneMapSamp, coord * metalnessMapLoopNum).g;
            #elif METALNESS_MAP_SWIZZLE == 2
                return tex2D(ToneMapSamp, coord * metalnessMapLoopNum).b;
            #elif METALNESS_MAP_SWIZZLE == 3
                return tex2D(ToneMapSamp, coord * metalnessMapLoopNum).a;
            #else
                return tex2D(ToneMapSamp, coord * metalnessMapLoopNum).r;
            #endif
        #else
            #if METALNESS_MAP_SWIZZLE == 0
                return tex2D(MetalnessMapSamp, coord * metalnessMapLoopNum).r;
            #elif METALNESS_MAP_SWIZZLE == 1
                return tex2D(MetalnessMapSamp, coord * metalnessMapLoopNum).g;
            #elif METALNESS_MAP_SWIZZLE == 2
                return tex2D(MetalnessMapSamp, coord * metalnessMapLoopNum).b;
            #elif METALNESS_MAP_SWIZZLE == 3
                return tex2D(MetalnessMapSamp, coord * metalnessMapLoopNum).a;
            #else
                return tex2D(MetalnessMapSamp, coord * metalnessMapLoopNum).r;
            #endif
        #endif
    #else
        return metalness;
    #endif
#else
    return 0.0;
#endif
}

float3 GetTransmittance(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SSS_ENABLE
        #if SSS_MAP_ENABLE
            #if SSS_MAP_UV_FLIP
                coord.y = 1 - coord.y;
            #endif
        
            #if SSS_APPLY_COLOR
                return srgb2linear(transmittance * tex2D(TransmittanceMapSamp, coord * transmittanceMapLoopNum).rgb);
            #else
                return srgb2linear(tex2D(TransmittanceMapSamp, coord * transmittanceMapLoopNum).rgb);
            #endif
        #else
            return transmittance;
        #endif
    #else
        return 0.0f;
    #endif
#else
    return 0.0;
#endif
}

float GetMelanin(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if MELANIN_MAP_ENABLE
        #if MELANIN_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
    
        #if MELANIN_MAP_SWIZZLE == 0
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #elif MELANIN_MAP_SWIZZLE == 1
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).g;
        #elif MELANIN_MAP_SWIZZLE == 2
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).b;
        #elif MELANIN_MAP_SWIZZLE == 3
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).a;
        #else
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #endif
    #else
        return melanin;
    #endif
#else
    return 0.0;
#endif
}

VS_OUTPUT MaterialVS(float4 Position : POSITION, float3 Normal : NORMAL, float2 Texcoord: TEXCOORD0)
{
    VS_OUTPUT Out;
    
#if SKYBOX_ENABLE
    Out.Position = mul(Position, matViewProject);
    Out.Normal = mul(normalize(Position.xyz), (float3x3)matWorldView);
#else
    Out.Position = mul(Position, matWorldViewProject);
    Out.Normal = normalize(mul(Normal, (float3x3)matWorldView));
#endif
    Out.Texcoord = Texcoord;
    Out.Distance = Out.Position.w;
    Out.Viewdir = mul(CameraPosition - Position.xyz, (float3x3)matView);
    return Out;
}

GbufferParam MaterialPS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap)
{
#if PARALLAX_MAP_ENABLE
    #if PARALLAX_MAP_UV_FLIP
        IN.Texcoord.y = 1 - IN.Texcoord.y;
    #endif
    IN.Texcoord = ParallaxOcclusionMap(ParallaxMapSamp, IN.Texcoord * parallaxMapLoopNum, normalize(IN.Viewdir), 15, parallaxMapScale);
    #if PARALLAX_MAP_UV_FLIP
        IN.Texcoord.y = 1 - IN.Texcoord.y;
    #endif
#endif

    float alpha = GetAlpha(IN.Texcoord, useTexture);
    clip(alpha - alphaThreshold);
    
    float3 albedoColor = GetAlbedo(IN.Texcoord, useTexture);
    albedoColor = ColorSynthesis(albedoColor, GetMelanin(IN.Texcoord));
    
    float3 MaterialMetalness = GetMetalness(IN.Texcoord);

    MaterialParam material;
    material.normal = GetNormal(normalize(IN.Normal), normalize(-IN.Viewdir), IN.Texcoord);
    material.smoothness = GetSmoothness(IN.Texcoord);
    material.albedo = albedoColor * (1.0 - MaterialMetalness);
    material.specular = lerp(metalnessBaseSpecular, albedoColor, MaterialMetalness);
    material.transmittance = GetTransmittance(IN.Texcoord) * (1.0 - MaterialMetalness);
    material.index = transmittanceStrength;
    material.emissive = GetEmissiveColor(IN.Texcoord, useTexture);
    material.emissiveIntensity = GetEmissiveIntensity();
    material.alpha = 1;
    
#if SSS_ENABLE && USE_CUSTOM_MATERIAL
    material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;
#elif EMISSIVE_ENABLE && USE_CUSTOM_MATERIAL
    material.lightModel = !any(material.emissive) ? LIGHTINGMODEL_NORMAL : LIGHTINGMODEL_EMISSIVE;
#else
    material.lightModel = (material.emissiveIntensity > 0) ? LIGHTINGMODEL_EMISSIVE : LIGHTINGMODEL_NORMAL;
#endif

    return EncodeGbuffer(material, IN.Distance);
}

GbufferParam Material2PS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap)
{
    float alpha = GetAlpha(IN.Texcoord, useTexture);
    if (alpha > alphaThreshold)
    {
        return (GbufferParam)0;
    }
    else
    {    
        if (alpha < 0.01)
        {
            clip(-1);
        }
    
        float3 albedoColor = GetAlbedo(IN.Texcoord, useTexture);
        albedoColor = ColorSynthesis(albedoColor, GetMelanin(IN.Texcoord));
       
        float3 MaterialMetalness = GetMetalness(IN.Texcoord);

        MaterialParam material;
        material.normal = GetNormal(normalize(IN.Normal), normalize(-IN.Viewdir), IN.Texcoord);
        material.smoothness = GetSmoothness(IN.Texcoord);
        material.albedo = albedoColor * (1.0 - MaterialMetalness);
        material.specular = lerp(metalnessBaseSpecular, albedoColor, MaterialMetalness);
        material.transmittance = GetTransmittance(IN.Texcoord) * (1.0 - MaterialMetalness);
        material.index = transmittanceStrength;
        material.emissive = GetEmissiveColor(IN.Texcoord, useTexture);
        material.emissiveIntensity = GetEmissiveIntensity();
        material.alpha = alpha;
        
    #if SSS_ENABLE && USE_CUSTOM_MATERIAL
        material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;
    #elif EMISSIVE_ENABLE && USE_CUSTOM_MATERIAL
        material.lightModel = !any(material.emissive) ? LIGHTINGMODEL_NORMAL : LIGHTINGMODEL_EMISSIVE;
    #else
        material.lightModel = (material.emissiveIntensity > 0) ? LIGHTINGMODEL_EMISSIVE : LIGHTINGMODEL_NORMAL;
    #endif

        return EncodeGbuffer(material, IN.Distance);
    }
}

#define OBJECT_TEC(name, mmdpass, tex, sphere) \
    technique name < string MMDPass = mmdpass; bool UseTexture = tex; bool UseSphereMap = sphere; \
    string Script = \
        "RenderColorTarget0=;" \
        "RenderColorTarget1=Gbuffer2RT;" \
        "RenderColorTarget2=Gbuffer3RT;" \
        "RenderColorTarget3=Gbuffer4RT;" \
        "Pass=DrawObject;" \
        "RenderColorTarget0=Gbuffer5RT;" \
        "RenderColorTarget1=Gbuffer6RT;" \
        "RenderColorTarget2=Gbuffer7RT;" \
        "RenderColorTarget3=Gbuffer8RT;" \
        "Pass=DrawAlphaObject;"\
    ; \
    > { \
        pass DrawObject { \
            AlphaTestEnable = false; AlphaBlendEnable = false; \
            VertexShader = compile vs_3_0 MaterialVS(); \
            PixelShader  = compile ps_3_0 MaterialPS(tex, sphere); \
        } \
        pass DrawAlphaObject { \
            AlphaTestEnable = false; AlphaBlendEnable = false; \
            VertexShader = compile vs_3_0 MaterialVS(); \
            PixelShader  = compile ps_3_0 Material2PS(tex, sphere); \
        } \
    }

OBJECT_TEC(MainTec0, "object", false, false)
OBJECT_TEC(MainTec1, "object", true, false)
OBJECT_TEC(MainTec2, "object", false, true)
OBJECT_TEC(MainTec3, "object", true, true)
OBJECT_TEC(MainTecBS0, "object_ss", false, false)
OBJECT_TEC(MainTecBS1, "object_ss", true, false)
OBJECT_TEC(MainTecBS2, "object_ss", false, true)
OBJECT_TEC(MainTecBS3, "object_ss", true, true)

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}