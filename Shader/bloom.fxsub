const float StarScale = 256;
const float BloomScale = 512;

static float2 BloomOffset1 = ViewportOffset2 * 2;
static float2 BloomOffset2 = ViewportOffset2 * 4;
static float2 BloomOffset3 = ViewportOffset2 * 8;
static float2 BloomOffset4 = ViewportOffset2 * 16;

static float BloomScale1 = ((ViewportSize.x * 0.5) / BloomScale);
static float BloomScale2 = ((ViewportSize.x * 0.25) / (BloomScale * 0.5));
static float BloomScale3 = ((ViewportSize.x * 0.125) / (BloomScale * 0.25));
static float BloomScale4 = ((ViewportSize.x * 0.0625) / (BloomScale * 0.125));

static float2 BloomOffsetX1 = float2(ViewportOffset2.x * 2, 0.0)  * BloomScale1;
static float2 BloomOffsetX2 = float2(ViewportOffset2.x * 4, 0.0)  * BloomScale2;
static float2 BloomOffsetX3 = float2(ViewportOffset2.x * 8, 0.0)  * BloomScale3;
static float2 BloomOffsetX4 = float2(ViewportOffset2.x * 16, 0.0) * BloomScale4;

static float2 BloomOffsetY1 = float2(0.0, ViewportOffset2.y * 2)  * BloomScale1;
static float2 BloomOffsetY2 = float2(0.0, ViewportOffset2.y * 4)  * BloomScale2;
static float2 BloomOffsetY3 = float2(0.0, ViewportOffset2.y * 8)  * BloomScale3;
static float2 BloomOffsetY4 = float2(0.0, ViewportOffset2.y * 16) * BloomScale4;

texture DownsampleMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={1.0, 1.0}; string Format="A16B16G16R16F";>;
texture DownsampleMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
texture DownsampleMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler DownsampleSamp1st = sampler_state {
	texture = <DownsampleMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp2nd = sampler_state {
	texture = <DownsampleMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp3rd = sampler_state {
	texture = <DownsampleMap3rd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture GlareLightMap : RENDERCOLORTARGET<float2 ViewPortRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler GlareLightMapSamp = sampler_state {
	texture = <GlareLightMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture BloomMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4th : RENDERCOLORTARGET<float2 ViewPortRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap1stTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2ndTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rdTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4thTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;

sampler BloomSamp1stTemp = sampler_state {
	texture = <BloomMap1stTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp1st = sampler_state {
	texture = <BloomMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2ndTemp = sampler_state {
	texture = <BloomMap2ndTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2nd = sampler_state {
	texture = <BloomMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rdTemp = sampler_state {
	texture = <BloomMap3rdTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rd = sampler_state {
	texture = <BloomMap3rd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4thTemp = sampler_state {
	texture = <BloomMap4thTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4th = sampler_state {
	texture = <BloomMap4th>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

#if HDR_STAR_MODE > 0
#if HDR_STAR_MODE == 1 || HDR_STAR_MODE == 2
static const float4 star_colorCoeff1st[4] = {float4(0.475,0.475,0.475,0.475), float4(0.456,0.456,0.456,0.456), float4(0.41472,0.41472,0.41472,0.41472), float4(0.42025,0.42025,0.42025,0.42025) };
static const float4 star_colorCoeff2nd[4] = {float4(0.475,0.475,0.475,0.475), float4(0.40344,0.40344,0.40344,0.40344), float4(0.324625,0.324625,0.324625,0.324625), float4(0.291037,0.291037,0.291037,0.291037) };
static const float4 star_colorCoeff3rd[4] = {float4(0.475,0.475,0.475,0.475), float4(0.234181,0.234181,0.234181,0.234181), float4(0.134055,0.134055,0.134055,0.134055), float4(0.0697628,0.0697628,0.0697628,0.0697628) };
static const float4 star_colorCoeff4th[4] = {float4(0.5,0.5,0.5,0.5), float4(0.0366715,0.0366715,0.0366715,0.0366715), float4(0.00268959,0.00268959,0.00268959,0.00268959), float4(0.000197263,0.000197263,0.000197263,0.000197263) };
#endif

#if HDR_STAR_MODE == 3 || HDR_STAR_MODE == 4
static const float4 star_colorCoeff1st[4] = {float4(0.25,0.25,0.25,0.25),float4(0.225,0.225,0.225,0.225),float4(0.2025,0.2025,0.2025,0.2025),float4(0.18225,0.18225,0.18225,0.18225)};
static const float4 star_colorCoeff2nd[4] = {float4(0.25,0.25,0.25,0.25),float4(0.164025,0.164025,0.164025,0.164025),float4(0.107617,0.107617,0.107617,0.107617),float4(0.0706074,0.0706074,0.0706074,0.0706074)};
static const float4 star_colorCoeff3rd[4] = {float4(0.25,0.25,0.25,0.25),float4(0.0463255,0.0463255,0.0463255,0.0463255),float4(0.0085842,0.0085842,0.0085842,0.0085842),float4(0.00159067,0.00159067,0.00159067,0.00159067)};
#endif

texture StreakMap1st : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap2nd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap1stTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap2ndTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler StreakSamp1st = sampler_state {
	texture = <StreakMap1st>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp1stTemp = sampler_state {
	texture = <StreakMap1stTemp>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp2nd = sampler_state {
	texture = <StreakMap2nd>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp2ndTemp = sampler_state {
	texture = <StreakMap2ndTemp>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

#if HDR_STAR_MODE == 3 || HDR_STAR_MODE == 4
texture StreakMap3rd : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap4th : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap3rdTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture StreakMap4thTemp : RENDERCOLORTARGET<float2 ViewPortRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler StreakSamp3rd = sampler_state {
	texture = <StreakMap3rd>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp3rdTemp = sampler_state {
	texture = <StreakMap3rdTemp>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp4th = sampler_state {
	texture = <StreakMap4th>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler StreakSamp4thTemp = sampler_state {
	texture = <StreakMap4thTemp>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
#endif

#endif

#if HDR_FLARE_MODE > 0
static const float4 ghost_scalar1st = float4(-4.0, 3.0, -2.0, 0.3);
static const float4 ghost_scalar2nd = float4(3.6, 2.0, 0.9, -0.77);

#if HDR_FLARE_MODE == 1
static const float4 ghost_modulation1st[4] = {float4(0.1, 0.10, 1.00, 1.0), float4(0.2, 0.30, 1.0, 1.0), float4(0.10, 0.20, 0.60, 1.0), float4(0.60, 0.30, 1.00, 1.0)};
static const float4 ghost_modulation2nd[4] = {float4(0.6, 0.20, 0.20, 1.0), float4(0.2, 0.06, 0.6, 1.0), float4(0.15, 0.00, 0.10, 1.0), float4(0.06, 0.00, 0.55, 1.0)};
#endif

#if HDR_FLARE_MODE == 2
static const float4 ghost_modulation1st[4] = {float4(1.0, 0.89, 0.80, 1.0), float4(1.0, 0.60, 0.5, 1.0), float4(0.50, 0.50, 0.30, 1.0), float4(0.50, 0.50, 0.30, 1.0)};
static const float4 ghost_modulation2nd[4] = {float4(0.2, 0.06, 0.14, 1.0), float4(0.5, 0.15, 0.1, 1.0), float4(0.10, 0.05, 0.02, 1.0), float4(0.10, 0.05, 0.02, 1.0)};
#endif

texture GhostMaskMap<string ResourceName = "shader/textures/mask.png"; int Miplevels = 0;>; 
sampler GhostMaskMapSamp = sampler_state
{
	texture = <GhostMaskMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU  = CLAMP; AddressV = CLAMP;
};
texture GhostImageMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {0.5, 0.5};
	string Format="A2B10G10R10";
>;
sampler GhostImageMapSamp = sampler_state {
	texture = <GhostImageMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
#endif

void HDRDownsampleVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord1 : TEXCOORD0,
	out float2 oTexcoord2 : TEXCOORD1,
	out float2 oTexcoord3 : TEXCOORD2,
	out float2 oTexcoord4 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float2 step)
{
	oPosition = Position;
	oTexcoord1 = Texcoord + step * 0.5;
	oTexcoord2 = oTexcoord1 + float2(step.x, 0);
	oTexcoord3 = oTexcoord1 + float2(step.x, step.y);
	oTexcoord4 = oTexcoord1 + float2(0, step.y);
}

float4 HDRDownsample4XPS(
	in float2 coord1 : TEXCOORD0, 
	in float2 coord2 : TEXCOORD1, 
	in float2 coord3 : TEXCOORD2, 
	in float2 coord4 : TEXCOORD3,
	uniform sampler source) : COLOR
{
	float4 color = tex2Dlod(source, float4(coord1, 0, 0));
	color += tex2Dlod(source, float4(coord2, 0, 0));
	color += tex2Dlod(source, float4(coord3, 0, 0));
	color += tex2Dlod(source, float4(coord4, 0, 0));
	return color / 4;
}

float4 HDRDownsamplePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
	return tex2Dlod(source, float4(coord, 0, 0));
}

void GlareDetectionVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord1 : TEXCOORD0,
	out float2 oTexcoord2 : TEXCOORD1,
	out float2 oTexcoord3 : TEXCOORD2,
	out float2 oTexcoord4 : TEXCOORD3,
	out float2 oTexcoord5 : TEXCOORD4,
	out float4 oPosition : POSITION)
{
	float4 offset0 = float4(-1,0,1,0) * ViewportOffset2.xyxy;
	float4 offset1 = float4(0,-1,0,1) * ViewportOffset2.xyxy;

	oPosition = Position;
	oTexcoord1 = Texcoord + ViewportOffset;
	oTexcoord2 = oTexcoord1 + offset0.xy;
	oTexcoord3 = oTexcoord1 + offset0.zw;
	oTexcoord4 = oTexcoord1 + offset1.xy;
	oTexcoord5 = oTexcoord1 + offset1.zw;
}

float4 GlareDetectionPS(
	in float2 coord1 : TEXCOORD0,
	in float2 coord2 : TEXCOORD1,
	in float2 coord3 : TEXCOORD2,
	in float2 coord4 : TEXCOORD3,
	in float2 coord5 : TEXCOORD4,
	uniform sampler source) : COLOR
{
#if HDR_BLOOM_MODE > 0
	float3 color = tex2Dlod(source, float4(coord1, 0, 0)).rgb;
	color = min(color, tex2Dlod(source, float4(coord2, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord3, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord4, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord5, 0, 0)).rgb);
	color = clamp(color, 0, 65535);

#if HDR_BLOOM_MODE == 1
	float3 bloom = max(0, color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 2
	float3 bloom = saturate(color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 3
	float lum = luminance(color);
	float3 bloom = saturate(color * (lum - mBloomThreshold));
#elif HDR_BLOOM_MODE == 4
	float lum = luminance(color) * mExposure;
	float3 bloom = saturate(color * (lum - mBloomThreshold));
#endif

	bloom *= mBloomIntensity;
#else
	float3 bloom = 0;
#endif

	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord1, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord1, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord1, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord1, 0, 0));

	float3 emissive0 = DecodeGBufferEmissive(MRT3, MRT4);
	float3 emissive1 = DecodeGBufferEmissive(MRT7, MRT8);

	bloom += max(0.0, lerp(emissive0, emissive1, MRT8.a) - 1.0);

	return float4(bloom, 0);
}

float4 BloomBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset, uniform int n) : COLOR
{
	static const float weights[15] = { 153, 816, 3060, 8568, 18564, 31824, 43758, 48620, 43758, 31824, 18564, 8568, 3060, 816, 153 };
	static const float weightSum = 262106.0;
	
	float4 color = 0;
	float2 coords = coord - offset * 7.0;
	
	for (int i = 0; i < 15; ++i)
	{
		color += tex2Dlod(source, float4(coords, 0, 0)) * (weights[i] / weightSum);
		coords += offset;
	}

	return color;
}

float BloomFactor(float factor) 
{
	float mirrorFactor = 1.2 - factor;
	return lerp(factor, mirrorFactor, mBloomRadius);
}

#if HDR_STAR_MODE > 0
void StarStreakVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2,
	out float2 oTexcoord3 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float2 stepSize,
	uniform float stride)
{
	float2 offset = ViewportSize * 0.25;
	oTexcoord0 = Texcoord + (0.5 / offset);
	oTexcoord1 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride;
	oTexcoord2 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride * 2;
	oTexcoord3 = oTexcoord0 + stepSize / (offset / (offset / StarScale)) * stride * 3;
	oPosition = Position;
}

float4 StarStreakPS(
	in float2 coord0 : TEXCOORD0,
	in float2 coord1 : TEXCOORD1,
	in float2 coord2 : TEXCOORD2,
	in float2 coord3 : TEXCOORD3,
	uniform sampler source, uniform float4 colorCoeff[4], uniform float threshold) : COLOR
{
	float4 color0 = tex2Dlod(source, float4(coord0, 0, 0)) * colorCoeff[0];
	float4 color1 = tex2Dlod(source, float4(coord1, 0, 0)) * colorCoeff[1];
	float4 color2 = tex2Dlod(source, float4(coord2, 0, 0)) * colorCoeff[2];
	float4 color3 = tex2Dlod(source, float4(coord3, 0, 0)) * colorCoeff[3];
	return max(0, (color0 + color1 + color2 + color3) - threshold / (1 - threshold + EPSILON) * 10);
}
#endif

float4 GlareLightCompPS(in float2 coord : TEXCOORD0) : COLOR
{
	float3 bloom1 = tex2Dlod(BloomSamp1st, float4(coord, 0, 0)).rgb;
	float3 bloom2 = tex2Dlod(BloomSamp2nd, float4(coord, 0, 0)).rgb;
	float3 bloom3 = tex2Dlod(BloomSamp3rd, float4(coord, 0, 0)).rgb;
	float3 bloom4 = tex2Dlod(BloomSamp4th, float4(coord, 0, 0)).rgb;
	
	float3 bloom = 0.0f;
	bloom += bloom1 * BloomFactor(mBloomFactors[0]);
	bloom += bloom2 * BloomFactor(mBloomFactors[1]);
	bloom += bloom3 * BloomFactor(mBloomFactors[2]);
	bloom += bloom4 * BloomFactor(mBloomFactors[3]);
	
#if HDR_STAR_MODE > 0
	float4 star = max(tex2Dlod(StreakSamp1st, float4(coord, 0, 0)), tex2Dlod(StreakSamp2nd, float4(coord, 0, 0)));
#if HDR_STAR_MODE > 2
	star = max(star, max(tex2Dlod(StreakSamp3rd, float4(coord, 0, 0)), tex2Dlod(StreakSamp4th, float4(coord, 0, 0))));
#endif
	bloom += star.rgb;
#endif
	
	return float4(bloom, 0.0);
}

#if HDR_FLARE_MODE > 0
void GhostImageVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2,
	out float2 oTexcoord3 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float4 scalar)
{
	oTexcoord0 = (Texcoord - 0.5) * scalar[0] + 0.5;
	oTexcoord1 = (Texcoord - 0.5) * scalar[1] + 0.5;
	oTexcoord2 = (Texcoord - 0.5) * scalar[2] + 0.5;
	oTexcoord3 = (Texcoord - 0.5) * scalar[3] + 0.5;
	oPosition = Position;
}

float4 GhostImagePS(
	in float2 coord0 : TEXCOORD0,
	in float2 coord1 : TEXCOORD1,
	in float2 coord2 : TEXCOORD2,
	in float2 coord3 : TEXCOORD3,
	uniform sampler source1,
	uniform sampler source2,
	uniform sampler source3,
	uniform float4 colorCoeff[4], uniform float threshold) : COLOR
{
	float ghostThreshold = threshold / (1 - threshold + EPSILON) * mBloomGhostThresholdMax;
	float4 color1 = saturate(tex2Dlod(source1, float4(coord0, 0, 0)) - ghostThreshold) * colorCoeff[0];
	float4 color2 = saturate(tex2Dlod(source1, float4(coord1, 0, 0)) - ghostThreshold) * colorCoeff[1];
	float4 color3 = saturate(tex2Dlod(source2, float4(coord2, 0, 0)) - ghostThreshold) * colorCoeff[2];
	float4 color4 = saturate(tex2Dlod(source3, float4(coord3, 0, 0)) - ghostThreshold) * colorCoeff[3];
	color1 *= tex2Dlod(GhostMaskMapSamp, float4(coord0, 0, 0));
	color2 *= tex2Dlod(GhostMaskMapSamp, float4(coord1, 0, 0));
	color3 *= tex2Dlod(GhostMaskMapSamp, float4(coord2, 0, 0));
	color4 *= tex2Dlod(GhostMaskMapSamp, float4(coord3, 0, 0));
	return color1 + color2 + color3 + color4;
}
#endif

#if POST_DISPERSION_MODE == 2
float3 SampleSpectrum(float x)
{
	float t = 3.0 * x - 1.5;
	return saturate(float3(-t, 1 - abs(t), t));
}

float3 ChromaticAberration(sampler source, float2 coord, float2 offset)
{
	const int samples = 7;

	float3 totalColor = 0.0;
	float3 totalWeight = 0.0;
	float2 delta = offset / samples;

	[unroll]
	for (int i = 0; i <= samples; i++, coord += delta)
	{
		float3 w = SampleSpectrum(float(i) / samples);
		
		totalWeight += w;
		totalColor += w * tex2Dlod(source, float4(coord, 0, 0)).rgb;
	}

	return totalColor / totalWeight;
}
#endif

float3 AppleDispersion(sampler source, float2 coord, float inner, float outer)
{
#if POST_DISPERSION_MODE == 1
	float L = length(coord * 2 - 1);
	L = 1 - smoothstep(outer, inner, L);
	float2 offset = ViewportOffset2 * L * (mDispersion * 8) * BloomScale1;
	float3 shift1 = tex2Dlod(source, float4(coord - offset, 0, 0)).rgb;
	float3 shift2 = tex2Dlod(source, float4(coord, 0, 0)).rgb;
	float3 shift3 = tex2Dlod(source, float4(coord + offset, 0, 0)).rgb;
	return float3(shift1.r, shift2.g, shift3.b);
#elif POST_DISPERSION_MODE == 2
	float L = 1 - smoothstep(outer, inner, length(coord * 2 - 1));
	float2 dist = ViewportOffset2 * L * (mDispersion * 12) * BloomScale1;
	float2 offset = (coord * 2 - 1.0) * dist;
	return ChromaticAberration(source, coord, offset);
#else
	return tex2Dlod(source, float4(coord, 0, 0));
#endif
}

float3 ApplyVignette(float3 color, float2 coord)
{
	float L = length(coord * 2 - 1);
	return color * smoothstep(mVignetteOuter - mVignette * 2, mVignetteInner - mVignette, L);
}

float3 ColorCorrect(float3 color, float contrast, float saturation, float gamma, float3 colorGrainRGBP, float3 colorGrainRGBM)
{
	float3 lum = luminance(color);
	color = lerp(lum, color, saturation);
	color = pow(color * (1.0 / 0.18), contrast) * 0.18;
	color = pow(color, gamma);
	color *= colorGrainRGBP + (1.0 - colorGrainRGBM);
	return color;
}

float4 FilmicToneMappingPS(in float2 coord: TEXCOORD0, uniform sampler source) : COLOR
{
	float3 color = AppleDispersion(source, coord, mDispersionRadius, 1 + mDispersionRadius);
	
#if HDR_ENABLE && HDR_BLOOM_MODE > 0
	float3 bloom = tex2Dlod(GlareLightMapSamp, float4(coord, 0, 0)).rgb;
	color += bloom;
#endif

	color = WhiteBalance(color, mColorTemperature);
	color = ColorCorrect(color, mContrast, mSaturation, mGamma, mColorBalanceRGBP, mColorBalanceRGBM);
	color = ApplyVignette(color, coord);
	color = ACESToneMapping(color * mExposure);
	
#if AA_QUALITY > 0
	return float4(color, luminance(color));
#else
	return float4(ACESOutputDevice(color.rgb), 1);
#endif
}