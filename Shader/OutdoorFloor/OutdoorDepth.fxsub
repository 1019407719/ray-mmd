#define MIDPOINT_8_BIT (127.0f / 255.0f)

float4x4 matWorldView : WORLDVIEW;
float4x4 matWorldViewProjMatrix : WORLDVIEWPROJECTION;
float4x4 matWorldMirror: CONTROLOBJECT < string Name = "(OffscreenOwner)"; >;

float4 MaterialDiffuse : DIFFUSE  < string Object = "Geometry"; >;
float  MaterialPower   : SPECULARPOWER < string Object = "Geometry"; >;

float4 TextureAddValue : ADDINGTEXTURE;
float4 TextureMulValue : MULTIPLYINGTEXTURE;
float3 CameraPosition : POSITION  < string Object = "Camera"; >;

static float3 MirrorPos = float3(0.0, 0.0, 0.0);
static float3 MirrorNormal = float3(0.0, 1.0, 0.0);
static float3 WorldMirrorPos = mul(float4(MirrorPos, 1.0f), matWorldMirror).xyz;
static float3 WorldMirrorNormal = normalize(mul(MirrorNormal, (float3x3)matWorldMirror));

texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
    texture = <DiffuseMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

float IsFace(float4 Pos)
{
    return min(dot(Pos.xyz - WorldMirrorPos, WorldMirrorNormal), dot(CameraPosition-WorldMirrorPos, WorldMirrorNormal));
}

float4 TransMirrorPos(float4 Pos)
{
    Pos.xyz -= WorldMirrorNormal * 2.0f * dot(WorldMirrorNormal, Pos.xyz - WorldMirrorPos);
    return Pos;
}

float4 GetAlbedo(float2 uv, bool use_texture)
{
    float4 diffuse = MaterialDiffuse;
    
    if (use_texture)
    {
        float4 TexColor = tex2D(DiffuseMapSamp, uv);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        TexColor.rgb = TexColor.rgb;
        diffuse.rgb *= TexColor.rgb;
    }
    
    return diffuse;
}

void OutdoorDepthVS(
    float4 Position : POSITION,
    float3 Normal : NORMAL,
    float2 Texcoord : TEXCOORD0,
    out float2 oTexcoord : TEXCOORD0,
    out float3 oNormal   : TEXCOORD1,
    out float4 oWorldPos : TEXCOORD2,
    out float4 oPosition : POSITION)
{   
#if SKYBOX_ENABLE
    oNormal = normalize(Position);
    oNormal = mul(oNormal, (float3x3)matWorldView);
    oWorldPos = float4(oNormal * 10000, 1);
#else
    oWorldPos = Position;
    oNormal = mul(Normal, (float3x3)matWorldView);
#endif
    oPosition = mul(TransMirrorPos(oWorldPos), matWorldViewProjMatrix);
    oPosition.x = -oPosition.x;
    oTexcoord = Texcoord;
}

float4 OutdoorDepthPS(
    in float2 coord : TEXCOORD0,
    in float3 normal   : TEXCOORD1,
    in float4 position : TEXCOORD2,
    in float4 screenPosition : SV_Position,
    uniform bool use_texture) : COLOR
{
    float4 color = GetAlbedo(coord, use_texture);
    
    clip(IsFace(position));
    clip(color.a - 0.01);

#if SKYBOX_ENABLE
    return float4(position.xyz, 0);
#else
    return float4(position.xyz, 1);
#endif
}

#define OBJECT_TEC(name, mmdpass, tex) \
    technique name<string MMDPass = mmdpass; bool UseTexture = tex; \
    > { \
        pass DrawDepth { \
            AlphaTestEnable = false; AlphaBlendEnable = false; \
            VertexShader = compile vs_3_0 OutdoorDepthVS(); \
            PixelShader  = compile ps_3_0 OutdoorDepthPS(tex); \
        } \
    }

OBJECT_TEC(MainTec0, "object", false)
OBJECT_TEC(MainTec1, "object", true)
OBJECT_TEC(MainTec2, "object", false)
OBJECT_TEC(MainTec3, "object", true)
OBJECT_TEC(MainTecBS0, "object_ss", false)
OBJECT_TEC(MainTecBS1, "object_ss", true)
OBJECT_TEC(MainTecBS2, "object_ss", false)
OBJECT_TEC(MainTecBS3, "object_ss", true)

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}