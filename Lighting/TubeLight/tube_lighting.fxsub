#include "../../ray.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/lighting.fxsub"

#define TUBELIGHT_MAX_WIDTH 55
#define TUBELIGHT_MAX_RADIUS 10

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mWidthP : CONTROLOBJECT < string name="(self)"; string item = "Width+"; >;
float mRadiusM : CONTROLOBJECT < string name="(self)"; string item = "Radius-"; >;
float mRadiusP : CONTROLOBJECT < string name="(self)"; string item = "Radius+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mBlink : CONTROLOBJECT < string name="(self)"; string item = "Blink"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;
float3 mLeft : CONTROLOBJECT < string name="(self)"; string item = "Left"; >;
float3 mRight : CONTROLOBJECT < string name="(self)"; string item = "Right"; >;

static float LightWidth = (1 + mWidthP * TUBELIGHT_MAX_WIDTH);
static float LightRadius = (1 + mRadiusP * TUBELIGHT_MAX_RADIUS - mRadiusM);
static float LightRange = (1 + mRadiusP * TUBELIGHT_MAX_RADIUS - mRadiusM + mRangeP * LIGHTSOURCE_MAX_RANGE);
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float3 LightLeft = mLeft - (mLeft - LightPosition) * LightWidth;
static float3 LightRight = mRight + (mLeft - LightPosition) * LightWidth;
static float3 viewLightLeft = mul(float4(LightLeft, 1), matView).xyz;
static float3 viewLightRight = mul(float4(LightRight, 1), matView).xyz;

float4 ShadingMaterial(MaterialParam material, float3 V)
{
    float3 P = V * material.linearDepth / V.z;
    float3 L0 = viewLightLeft - P;
    float3 L1 = viewLightRight - P;
    float3 L = TubeLightDirection(material.normal, V, L0, L1, P, LightRadius);
    float3 L2 = normalize(L);
    
    float atten1 = GetPhysicalLightAttenuation(L, LightRange);
    float atten2 = saturate(dot(material.normal, L2)) * atten1;
    
    float4 lighting = 0.0f;    
    lighting.rgb = atten1 * material.albedo * DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);    
    lighting.rgb += atten2 * TubeLightBRDF(P, material.normal, V, L0, L1, LightWidth, LightRadius, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * any(material.albedo + material.specular);
    lighting *= saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));
    
    return lighting;
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    Position.xyz = LightPosition + (Position.xyz - LightPosition) * 10000;
    oTexcoord0 = oPosition = mul(Position, matViewProject);
    oTexcoord1 = -mul(Position, matView);
}

void LightSourcePS(
    float4 texcoord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
        string Script = \
            "RenderColorTarget0=;"\
            "RenderColorTarget1=LightAlphaMap;"\
            "Pass=DrawObject;"\
    ;> { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            CullMode = CW;\
            VertexShader = compile vs_3_0 LightSourceVS(); \
            PixelShader  = compile ps_3_0 LightSourcePS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}