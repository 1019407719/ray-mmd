#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"
#include "../../shader/shadowcommon.fx"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mAngleM : CONTROLOBJECT < string name="(self)"; string item = "Angle-"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;
static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;
static float LightSpotAngle = radians(lerp(60.0f, 0.0f, mAngleM));

#if SHADOW_MAP_ENABLE
#if SHADOW_MAP_QUALITY == 0
#   define SPOT_SHADOW_MAP_SIZE 256
#elif SHADOW_MAP_QUALITY == 1
#   define SPOT_SHADOW_MAP_SIZE 512
#elif SHADOW_MAP_QUALITY >= 2
#   define SPOT_SHADOW_MAP_SIZE 1024
#elif SHADOW_MAP_QUALITY >= 3
#   define SPOT_SHADOW_MAP_SIZE 2048
#else
#   define SPOT_SHADOW_MAP_SIZE 256
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
    string Description = "Shadow Rendering";
    int Width = SPOT_SHADOW_MAP_SIZE;
    int Height = SPOT_SHADOW_MAP_SIZE;
    string Format = "R32F";
    float4 ClearColor = { 0, 0, 0, 0 };
    float ClearDepth = 1.0;
    int MipLevels = 1;
    string DefaultEffect = 
        "self = hide;"
        "skybox*.pmx = hide;"
        "ray_controller.pmx=hide;"

        "*.pmx = spot_shadow.fx;"
        "*.pmd = spot_shadow.fx;"
#endif
        "* = hide";
>;
sampler ShadowMapSamp = sampler_state {
    texture = <ShadowMap>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = CLAMP;
    AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SPOT_SHADOW_MAP_SIZE, 0.5 / SPOT_SHADOW_MAP_SIZE);
static float2 ShadowmapOffset2 = float2(1.0 / SPOT_SHADOW_MAP_SIZE, 1.0 / SPOT_SHADOW_MAP_SIZE);

float ESM(float3 viewPosition) 
{
    float4 worldPosition = mul(float4(viewPosition, 1), matViewInverse);
#if SPOTLIGHT_ENABLE
    float4 shadowPosition = mul(worldPosition, GetLightViewMatrix(LightDirection, mDirection));
#else
    float4 shadowPosition = mul(worldPosition, GetLightViewMatrix(LightDirection, LightPosition));
#endif
    float4 proj = CalcLightProjPos(LightSpotAngle, LightPlaneNear, LightPlaneFar, shadowPosition);
    
    proj.xy = PosToCoord(proj.xy / proj.w);
    proj.xy += ShadowmapOffset;
    proj.z = exp(-proj.z * 0.5);

    float shadow = saturate(tex2D(ShadowMapSamp, proj.xy).r * proj.z);
    return saturate(shadow);
}

float PCF(float3 viewPosition, int samples) 
{
    float4 worldPosition = mul(float4(viewPosition, 1), matViewInverse);
    float4 shadowPosition = mul(worldPosition, GetLightViewMatrix(LightDirection, mDirection));
    float4 proj = CalcLightProjPos(LightSpotAngle, LightPlaneNear, LightPlaneFar, shadowPosition);
    
    proj.xy = PosToCoord(proj.xy / proj.w);
    proj.xy += ShadowmapOffset;
    proj.z = exp(-proj.z * 0.5);

    float shadow = 0.0;

    [unroll]
    for (int x = -samples; x <= samples; x++) 
    {
        [unroll]
        for (int y = -samples; y <= samples; y++)
        {
            float2 pos = proj.xy + float2(x, y) * ShadowmapOffset2;
            shadow += saturate(tex2D(ShadowMapSamp, pos).r * proj.z);
        }
    }
    
    samples = samples * 2 + 1;
    
    return saturate(shadow / (samples * samples));
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    if (length(Position.xyz - LightPosition) > 0.1)
    {
        Position.xyz = lerp(mDirection, Position.xyz + normalize(Position.xyz - mDirection) * (1.2 + LightSpotAngle), LightSpotAngle);
    }
    
    Position.xyz = LightPosition + (Position.xyz - LightPosition) * LightRange / 2;
    oTexcoord0 = oPosition = mul(Position, matViewProject);
    oTexcoord1 = -mul(Position, matView);
}

float4 LightSourcePS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float3 V = normalize(viewdir);
    float3 P = V * tex2D(Gbuffer4Map, coord).r / V.z;
    float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    vis *= GetSpotLightAttenuation(L, viewLightDirection, cos(LightSpotAngle), 2, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis  * any(material.albedo + material.specular);
    
#if SHADOW_MAP_ENABLE
    #if SHADOW_MAP_SOFT_QUALITY == 1
        lighting *= PCF(P, 1);
    #elif SHADOW_MAP_SOFT_QUALITY >= 2
        lighting *= PCF(P, 2);
    #elif SHADOW_MAP_SOFT_QUALITY >= 3
        lighting *= PCF(P, 3);
    #else
        lighting *= ESM(P);
    #endif
#endif

    return lighting;
}

float4 LightSourceShadowlessPS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float3 V = normalize(viewdir);
    float3 P = V * tex2D(Gbuffer4Map, coord).r / V.z;
    float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    vis *= GetSpotLightAttenuation(L, viewLightDirection, cos(LightSpotAngle), 2, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);

    return lighting;
}

technique MainTech0 < string MMDPass = "object";> 
{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = CW;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
    }
}

technique MainTecBS0 < string MMDPass = "object_ss";> 
{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = CW;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourcePS();
    }
}

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}