#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;
static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    Position.xyz = LightPosition + Normal * LightRange;
    oTexcoord0 = oPosition = mul(Position, matViewProject);
    oTexcoord1 = -mul(Position, matView);
}

float4 LightSourcePS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;   

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float3 V = normalize(viewdir);
    float3 P = V * tex2D(Gbuffer4Map, coord).r / V.z;

    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
            
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;    
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);
    
    return lighting;
}

#if RECTANGLIELIGHT_ENABLE || AMBIENT_ENABLE
    #define OBJECT_TEC(name, mmdpass) \
        technique name < string MMDPass = mmdpass;\
        > { \
            pass DrawObject { \
                ZEnable = false; ZWriteEnable = false;\
                AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
                SrcBlend = ONE; DestBlend = ONE;\
                VertexShader = compile vs_3_0 LightSourceVS(); \
                PixelShader  = compile ps_3_0 LightSourcePS(); \
            } \
        }
#else
    #define OBJECT_TEC(name, mmdpass) \
        technique name < string MMDPass = mmdpass;\
        > { \
            pass DrawObject { \
                ZEnable = false; ZWriteEnable = false;\
                AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
                SrcBlend = ONE; DestBlend = ONE;\
                CullMode = CW;\
                VertexShader = compile vs_3_0 LightSourceVS(); \
                PixelShader  = compile ps_3_0 LightSourcePS(); \
            } \
        }
#endif

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}