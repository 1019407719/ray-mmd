#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"

float EnvRotateX : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateX"; >;
float EnvRotateY : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateY"; >;
float EnvRotateZ : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateZ"; >;

static float rotateX = EnvRotateX * PI_2;
static float rotateY = EnvRotateY * PI_2;
static float rotateZ = EnvRotateZ * PI_2;
static float3x3 rotate = makeRotate(rotateX, rotateY, rotateZ);

texture IBLDiffuseTexture: MATERIALTOONTEXTURE;
sampler IBLDiffuseSampler = sampler_state {
    texture = <IBLDiffuseTexture>;
    
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = NONE;
    
    ADDRESSU  = CLAMP;
    ADDRESSV  = CLAMP;
};

texture IBLSpecularTexture : MATERIALSPHEREMAP;
sampler IBLSpecularSampler = sampler_state {
    texture = <IBLSpecularTexture>;

    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    
    ADDRESSU  = CLAMP;
    ADDRESSV  = CLAMP;
};

float mEnvLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvLight+";>;
float mEnvLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvLight-";>;
float mEnvSpecLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight+";>;
float mEnvSpecLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight-";>;

void ShadingMaterial(float3 V, MaterialParam material, out float3 diffuse, out float3 specular)
{
    float3 worldView = V;
    float3 worldNormal = mul(material.normal, (float3x3)matViewInverse);
    float3 worldReflect = EnvironmentReflect(worldNormal, worldView);
    
    float roughness = SmoothnessToRoughness(material.smoothness);
    float mipLayer = EnvironmentMip(roughness, IBL_MIPMAP_LEVEL);

#if 1
    float3 R = mul(rotate, worldReflect);
    float3 N = mul(rotate, worldNormal);
#else
    float3 R = GetSpecularDominantDir(worldNormal, worldReflect, roughness);
    float3 N = GetDiffuseDominantDir(worldNormal, worldView, roughness);

    R = mul(rotate, normalize(R));
    N = mul(rotate, normalize(N));
#endif

    float4 prefilteredDiffuse = tex2D(IBLDiffuseSampler, computeSphereCoord(N));
    float4 prefilteredSpeculr = tex2Dlod(IBLSpecularSampler, float4(computeSphereCoord(R), 0, mipLayer));
    float4 prefilteredTransmittance = tex2D(IBLDiffuseSampler, computeSphereCoord(-N));

#if IBL_ENABLE_GAMMA_CORRECTION
    prefilteredDiffuse.rgb = srgb2linear(prefilteredDiffuse.rgb);
    prefilteredSpeculr.rgb = srgb2linear(prefilteredSpeculr.rgb);
    prefilteredTransmittance.rgb = srgb2linear(prefilteredTransmittance.rgb);
#endif

#if IBL_HDR_ENABLE
    prefilteredDiffuse.rgb = DecodeRGBM(prefilteredDiffuse);
    prefilteredSpeculr.rgb = DecodeRGBM(prefilteredSpeculr);
    prefilteredTransmittance.rgb = DecodeRGBM(prefilteredTransmittance);
#endif

    prefilteredSpeculr *= HorizonOcclusion(worldNormal, worldReflect);

    diffuse = prefilteredDiffuse.rgb * material.albedo + prefilteredTransmittance.rgb * material.transmittance;
    specular = prefilteredSpeculr.rgb * EnvironmentSpecularUnreal4(worldNormal, worldView, roughness, material.specular);
    specular *= step(0, material.specular - 1e-5);

    diffuse *= (1 + mEnvLightP * 5 - mEnvLightM);
    specular *= (1 + mEnvSpecLightP * 5 - mEnvSpecLightM);
}

void EnvLightingVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float3 oViewdir   : TEXCOORD1,
    out float4 oTexcoord2 : TEXCOORD2,
    out float4 oPosition  : SV_Position)
{
    oTexcoord = Texcoord.xyxy;
    oViewdir = CameraPosition - Position.xyz;
    oTexcoord2 = oPosition = mul(Position, matWorldViewProject);
}

float4 EnvLightingPS(
    float4 texcoord : TEXCOORD0,
    float3 viewdir  : TEXCOORD1,
    float4 texcoord2 : TEXCOORD2,
    float4 screenPosition : SV_Position) : SV_Target
{   
#if IBL_QUALITY > 0
    float2 coord = texcoord2.xy / texcoord2.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    
    MaterialParam material;    
    DecodeGbuffer(MRT1, MRT2, MRT3, material);

    float3 V = normalize(viewdir);
    
    float3 diffuse, specular;    
    ShadingMaterial(V, material, diffuse, specular);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);

    float alphaDiffuse = 0;
    MaterialParam materialAlpha;
    
    DecodeGbufferWithAlpha(MRT5, MRT6, MRT7, materialAlpha, alphaDiffuse);
    
    float3 diffuse2, specular2;
    ShadingMaterial(V, materialAlpha, diffuse2, specular2);
    
    diffuse += specular;
    diffuse2 += specular2;

    return EncodeYcbcr(screenPosition, diffuse, diffuse2);
#else
    return 0.0f;
#endif
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            AlphaBlendEnable = false; AlphaTestEnable = false;\
            VertexShader = compile vs_3_0 EnvLightingVS(); \
            PixelShader  = compile ps_3_0 EnvLightingPS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}