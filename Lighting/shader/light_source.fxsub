#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"
#include "../../shader/shadowcommon.fx"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;

static float3 LightDirection = normalize(mDirection - mPosition);
static float3 LightPosition = mPosition;
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;

#if SPOTLIGHT_ENABLE
float mAngleM : CONTROLOBJECT < string name="(self)"; string item = "Angle-"; >;

static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;
static float LightSpotAngle = radians(lerp(60.0f, 0.0f, mAngleM));
#elif SPHERELIGHT_ENABLE
float mSizeP : CONTROLOBJECT < string name="(self)"; string item = "Size+"; >;

static float LightSize = (1 + mSizeP * SPHERELIGHT_MAX_SIZE);
static float LightRange = (1 + (mSizeP * SPHERELIGHT_MAX_SIZE + mRangeP * LIGHTSOURCE_MAX_RANGE)) * SPHERELIGHT_MAX_SIZE;
#elif TUBELIGHT_ENABLE
float mWidthP : CONTROLOBJECT < string name="(self)"; string item = "Width+"; >;
float mRadiusM : CONTROLOBJECT < string name="(self)"; string item = "Radius-"; >;
float mRadiusP : CONTROLOBJECT < string name="(self)"; string item = "Radius+"; >;

float3 mLeft : CONTROLOBJECT < string name="(self)"; string item = "Left"; >;
float3 mRight : CONTROLOBJECT < string name="(self)"; string item = "Right"; >;

static float LightWidth = (1 + mWidthP * TUBELIGHT_MAX_WIDTH);
static float LightRadius = (1 + mRadiusP * TUBELIGHT_MAX_RADIUS - mRadiusM);
static float LightRange = (1 + mRadiusP * TUBELIGHT_MAX_RADIUS - mRadiusM + mRangeP * LIGHTSOURCE_MAX_RANGE);
static float3 LightLeft = mLeft - (mLeft - mPosition) * LightWidth;
static float3 LightRight = mRight + (mLeft - mPosition) * LightWidth;
#elif RECTANGLIELIGHT_ENABLE
float mWidthP : CONTROLOBJECT < string name="(self)"; string item = "Width+"; >;
float mHeightP : CONTROLOBJECT < string name="(self)"; string item = "Height+"; >;
float3 mRightTop : CONTROLOBJECT < string name="(self)"; string item = "RightTop"; >;
float3 mRightBottom : CONTROLOBJECT < string name="(self)"; string item = "RightBottom"; >;

static float LightRange = (1 + mRangeP * LIGHTSOURCE_MAX_RANGE);
static float LightWidth = (1 + mWidthP * RECTANGLELIGHT_MAX_WIDTH);
static float LightHeight = (1 + mHeightP * RECTANGLELIGHT_MAX_HEIGHT);
#elif AMBIENT_ENABLE
#else
static float LightRange = 1 + mRangeP * LIGHTSOURCE_MAX_RANGE;
#endif

#if VIDEO_MAP_ENABLE && VIDEO_MAP_IN_TEXTURE != 1
    #if VIDEO_MAP_IN_SCREEN_MAP
        shared texture2D DummyScreenTex : RenderColorTarget;
    #elif VIDEO_MAP_ANIMATION_ENABLE
        texture VideoMap : ANIMATEDTEXTURE <string ResourceName = VIDEO_MAP_FILE; float speed=VIDEO_MAP_ANIMATION_SPEED;>;
    #else
        texture VideoMap<string ResourceName = VIDEO_MAP_FILE;>;
    #endif
    sampler VideoMapSamp = sampler_state
    {
#if VIDEO_MAP_IN_SCREEN_MAP
        texture = DummyScreenTex;
#else
        texture = VideoMap;
#endif
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#elif VIDEO_MAP_ENABLE
    texture VideoMap: MATERIALTEXTURE;
    sampler VideoMapSamp = sampler_state
    {
        texture = <VideoMap>;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#endif

#if SHADOWMAP_ENABLE && SPOTLIGHT_ENABLE
#if SHADOWMAP_QUALITY == 0
#   define SHADOWMAP_SIZE 512
#elif SHADOWMAP_QUALITY == 1
#   define SHADOWMAP_SIZE 1024
#elif SHADOWMAP_QUALITY >= 2
#   define SHADOWMAP_SIZE 2048
#else
#   define SHADOWMAP_SIZE 512
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
    string Description = "Shadow Rendering";
    int Width = SHADOWMAP_SIZE;
    int Height = SHADOWMAP_SIZE;
    string Format = "R32F";
    float4 ClearColor = { 0, 0, 0, 0 };
    float ClearDepth = 1.0;
    int MipLevels = 1;
    string DefaultEffect = 
        "self = hide;"
        "skybox*.pmx = hide;"
        "ray_controller.pmx=hide;"
#if SPOTLIGHT_ENABLE
        "*.pmx = spot_shadow.fx;"
        "*.pmd = spot_shadow.fx;"
#endif
        "* = hide";
>;
sampler ShadowMapSamp = sampler_state {
    texture = <ShadowMap>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = CLAMP;
    AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SHADOWMAP_SIZE, 0.5 / SHADOWMAP_SIZE);
static float2 ShadowmapOffset2 = float2(1.0 / SHADOWMAP_SIZE, 1.0 / SHADOWMAP_SIZE);

float ShadowMapFilter(float3 viewPosition, int samples) 
{
    float4 worldPosition = mul(float4(viewPosition, 1), matViewInverse);
#if SPOTLIGHT_ENABLE
    float4 shadowPosition = mul(worldPosition, GetLightViewMatrix(LightDirection, mDirection));
#else
    float4 shadowPosition = mul(worldPosition, GetLightViewMatrix(LightDirection, LightPosition));
#endif
    float4 proj = CalcLightProjPos(LightSpotAngle, LightPlaneNear, LightPlaneFar, shadowPosition);
    
    proj.xy = PosToCoord(proj.xy / proj.w);
    proj.xy += ShadowmapOffset;
    proj.z = exp(-proj.z * 0.5);

#if SHADOWMAP_SOFT_SHADOW
    float shadow = 0.0;
    float offset = (samples - 1.0) / 2.0;

    for (float x = -offset; x <= offset; x++) 
    {
        for (float y = -offset; y <= offset; y++)
        {
            float2 pos = proj.xy + float2(x, y) * ShadowmapOffset2;
            shadow += saturate(tex2D(ShadowMapSamp, pos).r * proj.z);
        }
    }
    
    shadow /= samples * samples;
    return saturate(shadow);
#else
    float shadow = saturate(tex2D(ShadowMapSamp, proj.xy).r * proj.z);
    return saturate(shadow);
#endif    
}
#endif

float4 GaussianBlur(sampler source, float2 coord, float2 offset, int radius, float sigma)
{
    float totalWeight = 0.0;
    float4 totalColor = 0.0;
  
    for (int i = -radius; i < radius; ++i)
    {
        float gaussianX = exp(-(i * i) / (2.0 * sigma * sigma));
        float offsetX = i * offset.x;
     
        for(int j = -radius; j < radius; ++j)
        {
            float gaussianY = exp(-(j * j) / (2.0 * sigma * sigma));

            float offsetY = j * offset.y;
            float4 color = tex2D(source, coord + float2(offsetX, offsetY));

            totalWeight += gaussianX * gaussianY;
            totalColor += color * gaussianX * gaussianY;
        }
    }

    return (totalColor / totalWeight);
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
#if SPOTLIGHT_ENABLE    
    if (length(Position.xyz - LightPosition) > 0.1)
    {
        Position.xyz = lerp(mDirection, Position.xyz + normalize(Position.xyz - mDirection) * (1.2 + LightSpotAngle), LightSpotAngle);
    }
    Position.xyz = LightPosition + (Position.xyz - LightPosition) * LightRange / 2;
#elif TUBELIGHT_ENABLE
    Position.xyz = LightPosition + (Position.xyz - LightPosition) * 10000;
#elif AMBIENT_ENABLE
#else
    Position.xyz = LightPosition + Normal * LightRange;
#endif
    
#if RECTANGLIELIGHT_ENABLE || AMBIENT_ENABLE
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
    oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
    oTexcoord1 = -mul(oPosition, matProjectInverse);
#else
    oTexcoord0 = oPosition = mul(Position, matViewProject);
    oTexcoord1 = -mul(Position, matView);
#endif
}

float4 LightSourcePS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
#if RECTANGLIELIGHT_ENABLE || AMBIENT_ENABLE
    float2 coord = texcoord;
#else
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;   
#endif

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float3 V = normalize(viewdir);
    float3 P = V * tex2D(Gbuffer4Map, coord).r / V.z;

#if AMBIENT_ENABLE
    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));
    
    float3 L = normalize(viewLightDirection);
    
    float vis = saturate(dot(material.normal, L) * 0.5 + 0.5);
    if (vis < 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0;
    lighting.rgb = float3(mR, mG, mB) * vis * LightIntensity;
    lighting.rgb *= material.albedo;
    return lighting;
    
#elif SPOTLIGHT_ENABLE
    float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    vis *= GetSpotLightAttenuation(L, viewLightDirection, cos(LightSpotAngle), 2, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis  * any(material.albedo + material.specular);
    
#if SHADOWMAP_ENABLE && SPOTLIGHT_ENABLE
    lighting *= ShadowMapFilter(P, 8);
#endif
    return lighting;
    
#elif SPHERELIGHT_ENABLE
    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);    
    lighting.rgb *= material.albedo;
    lighting.rgb += SphereAreaLightBRDF(material.normal, V, L, LightSize, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);
    return lighting;
    
#elif TUBELIGHT_ENABLE
    float3 L0 = mul(float4(LightLeft, 1), matView).xyz - P;
    float3 L1 = mul(float4(LightRight, 1), matView).xyz - P;
    float3 L = TubeLightDirection(material.normal, V, L0, L1, P, LightRadius);
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;    
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);    
    lighting.rgb *= material.albedo;
    lighting.rgb += TubeLightBRDF(P, material.normal, V, L0, L1, LightWidth, LightRadius, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);
    return lighting;
    
#elif RECTANGLIELIGHT_ENABLE
    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
    
    float3 LightRight = normalize(mul((mRightTop + mRightBottom) / 2 - LightPosition, (float3x3)matView));
    float3 LightUp = normalize(cross(viewLightDirection, LightRight));
    float2 LightRect = float2(LightWidth, LightHeight);
    
    float2 coord1, coord2;
    float3 L = viewLightPosition - P;
    float3 Lw = RectangleDirection(L, LightRight, LightUp, viewLightDirection, LightRect, coord1);
    float3 L2 = normalize(Lw);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(Lw, LightRange);
    #if RECTANGLELIGHT_TWOSIDE_LIGHTING == 0
        vis *= RectangleAttenuation(Lw, viewLightDirection, PI / 2, LightRange);
    #endif
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;   
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;
    
    #if VIDEO_MAP_ENABLE
        lighting.rgb *= srgb2linear(GaussianBlur(VideoMapSamp, coord1, ViewportOffset2, 5, 10).rgb);
    #endif
    
    #if VIDEO_MAP_ENABLE
        float3 specular = 0;
        specular = RectangleLightBRDFWithUV(material.normal, V, L, LightRight, LightUp, viewLightDirection, LightRect, material.smoothness, material.specular, coord2);
        specular *= srgb2linear(tex2D(VideoMapSamp, coord2 * vedioMapLoopNum).rgb);
        lighting.rgb += specular;
    #else
        lighting.rgb += RectangleLightBRDF(material.normal, V, L, LightRight, LightUp, viewLightDirection, LightRect, material.smoothness, material.specular);
    #endif
    
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);
    return lighting;
    
#else
    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    
    float3 L = viewLightPosition - P;
    float3 L2 = normalize(L);
    
    float vis = saturate(dot(material.normal, L2));
    vis *= GetPhysicalLightAttenuation(L, LightRange);
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;
            
    lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;    
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis * any(material.albedo + material.specular);
    
    return lighting;
#endif
}

#if RECTANGLIELIGHT_ENABLE || AMBIENT_ENABLE
    #define OBJECT_TEC(name, mmdpass) \
        technique name < string MMDPass = mmdpass;\
        > { \
            pass DrawObject { \
                ZEnable = false; ZWriteEnable = false;\
                AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
                SrcBlend = ONE; DestBlend = ONE;\
                VertexShader = compile vs_3_0 LightSourceVS(); \
                PixelShader  = compile ps_3_0 LightSourcePS(); \
            } \
        }
#else
    #define OBJECT_TEC(name, mmdpass) \
        technique name < string MMDPass = mmdpass;\
        > { \
            pass DrawObject { \
                ZEnable = false; ZWriteEnable = false;\
                AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
                SrcBlend = ONE; DestBlend = ONE;\
                CullMode = CW;\
                VertexShader = compile vs_3_0 LightSourceVS(); \
                PixelShader  = compile ps_3_0 LightSourcePS(); \
            } \
        }
#endif

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}