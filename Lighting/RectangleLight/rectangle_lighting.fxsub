#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"
#include "../../shader/shadowcommon.fx"

#define RECTANGLELIGHT_MAX_WIDTH 50
#define RECTANGLELIGHT_MAX_HEIGHT 50

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mWidthP : CONTROLOBJECT < string name="(self)"; string item = "Width+"; >;
float mHeightP : CONTROLOBJECT < string name="(self)"; string item = "Height+"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;
float3 mRightTop : CONTROLOBJECT < string name="(self)"; string item = "RightTop"; >;
float3 mRightBottom : CONTROLOBJECT < string name="(self)"; string item = "RightBottom"; >;

static float3 LightDirection = normalize(mDirection - mPosition);
static float3 LightPosition = mPosition;
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;
static float LightRange = (1 + mRangeP * LIGHTSOURCE_MAX_RANGE);
static float LightWidth = (1 + mWidthP * RECTANGLELIGHT_MAX_WIDTH);
static float LightHeight = (1 + mHeightP * RECTANGLELIGHT_MAX_HEIGHT);

#if VIDEO_MAP_ENABLE && VIDEO_MAP_IN_TEXTURE != 1
    #if VIDEO_MAP_IN_SCREEN_MAP
        shared texture2D DummyScreenTex : RenderColorTarget;
    #elif VIDEO_MAP_ANIMATION_ENABLE
        texture VideoMap : ANIMATEDTEXTURE <string ResourceName = VIDEO_MAP_FILE; float speed=VIDEO_MAP_ANIMATION_SPEED;>;
    #else
        texture VideoMap<string ResourceName = VIDEO_MAP_FILE;>;
    #endif
    sampler VideoMapSamp = sampler_state
    {
#if VIDEO_MAP_IN_SCREEN_MAP
        texture = DummyScreenTex;
#else
        texture = VideoMap;
#endif
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#elif VIDEO_MAP_ENABLE
    texture VideoMap: MATERIALTEXTURE;
    sampler VideoMapSamp = sampler_state
    {
        texture = <VideoMap>;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#endif

float4 GaussianBlur(sampler source, float2 coord, float2 offset, int radius, float sigma)
{
    float totalWeight = 0.0;
    float4 totalColor = 0.0;
    
    [unroll]
    for (int i = -radius; i < radius; ++i)
    {
        float gaussianX = exp(-(i * i) / (2.0 * sigma * sigma));
        float offsetX = i * offset.x;
     
        [unroll]
        for(int j = -radius; j < radius; ++j)
        {
            float gaussianY = exp(-(j * j) / (2.0 * sigma * sigma));

            float offsetY = j * offset.y;
            float4 color = tex2D(source, coord + float2(offsetX, offsetY));

            totalWeight += gaussianX * gaussianY;
            totalColor += color * gaussianX * gaussianY;
        }
    }

    return (totalColor / totalWeight);
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{
    Position.xyz = LightPosition + Normal * LightRange;
    
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
    oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
    oTexcoord1 = -mul(oPosition, matProjectInverse);
}

float4 LightSourcePS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
    float2 coord = texcoord;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);
    float4 MRT3 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);
    
    float3 V = normalize(viewdir);
    float3 P = V * tex2D(Gbuffer4Map, coord).r / V.z;
    float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
    float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
    
    float3 LightRight = normalize(mul((mRightTop + mRightBottom) / 2 - LightPosition, (float3x3)matView));
    float3 LightUp = normalize(cross(viewLightDirection, LightRight));
    float2 LightRect = float2(LightWidth, LightHeight);
    
    float2 coord1, coord2;
    float3 L = viewLightPosition - P;
    float3 Lw = RectangleDirection(L, LightRight, LightUp, viewLightDirection, LightRect, coord1);
    float3 L2 = normalize(Lw);
    
    float atten = GetPhysicalLightAttenuation(Lw, LightRange);
    #if RECTANGLELIGHT_TWOSIDE_LIGHTING == 0
        atten *= RectangleAttenuation(Lw, viewLightDirection, PI / 2, LightRange);
    #endif
    
    float vis = saturate(dot(material.normal, L2)) * atten;
    if (vis <= 0)
    {
        clip(-1);
    }
    
    float4 lighting = 0.0f;   
    lighting.rgb = atten * DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb *= material.albedo;
    
    #if VIDEO_MAP_ENABLE
        lighting.rgb *= srgb2linear(GaussianBlur(VideoMapSamp, coord1, ViewportOffset2, 5, 10).rgb);
    #endif
    
    #if VIDEO_MAP_ENABLE
        float3 specular = 0;
        specular = RectangleLightBRDFWithUV(material.normal, V, L, LightRight, LightUp, viewLightDirection, LightRect, material.smoothness, material.specular, coord2);
        specular *= srgb2linear(tex2D(VideoMapSamp, coord2 * vedioMapLoopNum).rgb);
        lighting.rgb += vis * specular;
    #else
        lighting.rgb += vis * RectangleLightBRDF(material.normal, V, L, LightRight, LightUp, viewLightDirection, LightRect, material.smoothness, material.specular);
    #endif
    
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity * any(material.albedo + material.specular);
    return lighting;
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            VertexShader = compile vs_3_0 LightSourceVS(); \
            PixelShader  = compile ps_3_0 LightSourcePS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}