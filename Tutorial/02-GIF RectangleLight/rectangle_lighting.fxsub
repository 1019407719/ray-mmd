#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/lighting.fxsub"
#include "../../shader/shadowcommon.fxsub"

#define RECTANGLELIGHT_MAX_WIDTH 50
#define RECTANGLELIGHT_MAX_HEIGHT 50

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mBlink : CONTROLOBJECT < string name="(self)"; string item = "Blink"; >;
float mWidthP : CONTROLOBJECT < string name="(self)"; string item = "Width+"; >;
float mHeightP : CONTROLOBJECT < string name="(self)"; string item = "Height+"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;
float3 mRightTop : CONTROLOBJECT < string name="(self)"; string item = "RightTop"; >;
float3 mRightBottom : CONTROLOBJECT < string name="(self)"; string item = "RightBottom"; >;
float mMultiLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "MultiLight+"; >;
float mMultiLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "MultiLight-"; >;

static float LightRange = (1 + mRangeP * LIGHTSOURCE_MAX_RANGE) * mLightAttenuationBlub;
static float LightWidth = (1 + mWidthP * RECTANGLELIGHT_MAX_WIDTH);
static float LightHeight = (1 + mHeightP * RECTANGLELIGHT_MAX_HEIGHT);
static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);

static float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
static float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));
static float3 viewLightRight = normalize(mul((mRightTop + mRightBottom) / 2 - LightPosition, (float3x3)matView));
static float3 viewLightUp = normalize(cross(viewLightDirection, viewLightRight));

static float2 LightRect = float2(LightWidth, LightHeight);

#if VIDEO_MAP_ENABLE && VIDEO_MAP_IN_TEXTURE != 1
    #if VIDEO_MAP_IN_SCREEN_MAP
        shared texture2D DummyScreenTex : RenderColorTarget;
    #elif VIDEO_MAP_ANIMATION_ENABLE
        texture VideoMap : ANIMATEDTEXTURE <string ResourceName = VIDEO_MAP_FILE; float speed=VIDEO_MAP_ANIMATION_SPEED;>;
    #else
        texture VideoMap<string ResourceName = VIDEO_MAP_FILE;>;
    #endif
    sampler VideoMapSamp = sampler_state
    {
#if VIDEO_MAP_IN_SCREEN_MAP
        texture = DummyScreenTex;
#else
        texture = VideoMap;
#endif
        MINFILTER = LINEAR; MAGFILTER = LINEAR; MipFilter = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#elif VIDEO_MAP_ENABLE
    texture VideoMap: MATERIALTEXTURE;
    sampler VideoMapSamp = sampler_state
    {
        texture = <VideoMap>;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; MipFilter = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#undef SHADOW_MAP_SIZE

#if SHADOW_MAP_ENABLE

#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 512
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_WIDTH 512
#   define SHADOW_MAP_HEIGHT 1024
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_WIDTH 1024
#   define SHADOW_MAP_HEIGHT 2048
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_WIDTH 2048
#   define SHADOW_MAP_HEIGHT 4096
#else
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 512
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
    string Description = "Shadow Rendering for PointLight";
    int Width = SHADOW_MAP_WIDTH;
    int Height = SHADOW_MAP_HEIGHT;
    string Format = "R32F";
    float4 ClearColor = { 1, 1, 1, 1 };
    float ClearDepth = 1.0;
    int MipLevels = 1;
    string DefaultEffect = 
        "self = hide;"
        "*fog.pmx=hide;"
        "*controller.pmx=hide;"
        "*.pmx = rectangle_shadow.fx;"
        "*.pmd = rectangle_shadow.fx;"
        "* = hide";
>;
sampler ShadowMapSamp = sampler_state {
    texture = <ShadowMap>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = CLAMP;
    AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SHADOW_MAP_WIDTH, 0.5 / SHADOW_MAP_HEIGHT);
static float2 ShadowmapOffset2 = float2(1.0 / SHADOW_MAP_WIDTH, 1.0 / SHADOW_MAP_HEIGHT);

float ShadowPCF(float3 viewPosition, int samples) 
{
    float4 worldPosition = mul(float4(viewPosition, 1), matViewInverse);
    float3 L = worldPosition.xyz - LightPosition;
    
    float linearDepth = length(L);
    
    float depthScale = 85;
    float depth = (PointLightFar / linearDepth) * (linearDepth - PointLightNear) / (PointLightFar - PointLightNear);
    depth = exp(depth * -depthScale);

    float2 coord = CalcDualShadowCoord(L / linearDepth, SHADOW_MAP_HEIGHT);

    float shadow = 0.0;

#if SHADOW_MAP_SOFT_QUALITY > 0
    [unroll]
    for (int x = -samples; x <= samples; x++) 
    {
        [unroll]
        for (int y = -samples; y <= samples; y++)
        {
            float2 pos = coord.xy + float2(x, y) * ShadowmapOffset2;
            shadow += saturate(exp(tex2D(ShadowMapSamp, pos).r * depthScale) * depth);
        }
    }
    
    samples = samples * 2 + 1;
    
    return saturate(shadow / (samples * samples));
#else
    return saturate(depth * exp(tex2D(ShadowMapSamp, coord).r * depthScale));
#endif
}

#endif

float4 GaussianBlur(sampler source, float2 coord, float2 offset, int radius, float sigma, float mip)
{
    float totalWeight = 0.0;
    float4 totalColor = 0.0;
    
    [unroll]
    for (int i = -radius; i < radius; ++i)
    {
        float gaussianX = exp(-(i * i) / (2.0 * sigma * sigma));
        float offsetX = i * offset.x;
     
        [unroll]
        for(int j = -radius; j < radius; ++j)
        {
            float gaussianY = exp(-(j * j) / (2.0 * sigma * sigma));

            float offsetY = j * offset.y;
            float4 color = tex2Dlod(source, float4((coord + float2(offsetX, offsetY)) * vedioMapLoopNum, 0, mip));

            totalWeight += gaussianX * gaussianY;
            totalColor += color * gaussianX * gaussianY;
        }
    }

    return (totalColor / totalWeight);
}

float4 ShadingMaterial(MaterialParam material, float3 V)
{
    float3 P = V * material.linearDepth / V.z;
    
    float2 coord1, coord2;
    float3 L = viewLightPosition - P;
    float3 Lw = RectangleDirection(L, viewLightRight, viewLightUp, viewLightDirection, LightRect, coord1);
    float3 L2 = normalize(Lw);
    
    float atten1 = GetPhysicalLightAttenuation(Lw, LightRange);
    
    #if RECTANGLELIGHT_TWOSIDE_LIGHTING == 0
        atten1 *= RectangleAttenuation(Lw, viewLightDirection, PI / 2, LightRange);
    #endif
    
    float atten2 = saturate(dot(material.normal, L2)) * atten1;
    
    float3 diffuse = material.albedo * DiffuseBRDF(material.normal, L2, V, material);
    
    #if VIDEO_MAP_ENABLE
        float mip = (1 - material.smoothness * material.smoothness) * 6;
        diffuse *= srgb2linear(GaussianBlur(VideoMapSamp, coord1, ViewportOffset2, 3, 10, mip).rgb);
    #endif
    
    float3 specular = RectangleLightBRDF(material.normal, V, L, viewLightRight, viewLightUp, viewLightDirection, LightRect, material.smoothness, material.specular, coord2);
       
    #if VIDEO_MAP_ENABLE
        if (coord2.x >= 1.0 || coord2.y >= 1.0 ||
            coord2.x <= 0.0 || coord2.y <= 0.0)
        {
            specular *= 0.0;
        }
        else
        {
            float mip = (1 - material.smoothness * material.smoothness) * 6;
            specular *= srgb2linear(tex2Dlod(VideoMapSamp, float4(coord2 * vedioMapLoopNum, 0, mip)).rgb);
        }
    #endif
    
    float4 lighting = 0;
    lighting.rgb += atten1 * diffuse;
    lighting.rgb += atten2 * specular;    
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity;
    lighting *= saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));
    lighting *= (mLightIntensityMin * saturate(1 - mMultiLightM) + mLightIntensityMax * mMultiLightP);
    
    return lighting;
}

float4 ShadingShadow(MaterialParam material, MaterialParam materialAlpha, float3 V)
{
    float linearDepth = material.linearDepth;
    float linearDepth2 = materialAlpha.linearDepth;
    linearDepth = linearDepth2 > 1.0 ? min(linearDepth, linearDepth2) : linearDepth;
    
    float shadow = 1;
#if SHADOW_MAP_ENABLE
    float3 P = V * linearDepth / V.z;
    #if SHADOW_MAP_SOFT_QUALITY == 1
        shadow *= ShadowPCF(P, 1);
    #elif SHADOW_MAP_SOFT_QUALITY == 2
        shadow *= ShadowPCF(P, 2);
    #elif SHADOW_MAP_SOFT_QUALITY >= 3
        shadow *= ShadowPCF(P, 3);
    #else
        shadow *= ShadowPCF(P, 0);
    #endif
#endif

    return shadow;
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{   
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
    oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
    oTexcoord1 = -mul(oPosition, matProjectInverse);
}

void LightSourcePS(
    float2 coord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = materialAlpha.albedo + materialAlpha.specular;
    clip(sum(sum1 + sum2 - 1e-5));

    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
    
    clip(sum(oColor0 + oColor1) - 1e-5);
    
    float shadow = ShadingShadow(material, materialAlpha, V);
    oColor0 *= shadow;
    oColor1 *= shadow;
}

void LightSourceShadowlessPS(
    float2 coord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = materialAlpha.albedo + materialAlpha.specular;
    clip(sum(sum1 + sum2 - 1e-5));
    
    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
}

technique MainTech0 < string MMDPass = "object";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = NONE;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
    }
}

technique MainTecBS0 < string MMDPass = "object_ss";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = NONE;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourcePS();
    }
}

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}